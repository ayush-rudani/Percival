{
  "version": 3,
  "sources": [
    "/Users/ayush/Developer/Percival/projects/Percival-contracts/smart_contracts/percival_sc/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA6NG;;AAAA;AAAA;AAAA;;AAAA;AA7NH;;;AAAA;AA6NG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AApNH;;;AAAA;AAoNG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAhMH;;;AAAA;AAgMG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA/DA;;AAAA;AAAA;AAAA;;AAAA;AAjIH;;;AAAA;AAiIG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvBA;;AAAA;AAAA;AAAA;;AAAA;AA1GH;;;AAAA;AAAA;;;AAAA;AA0GG;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AAzDH;;;AAAA;AAAA;;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyDG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AArCA;;AAAA;AAAA;AAAA;;AAAA;AApBH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAoBG;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBH;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAoBE;;;AAGS;;AAAU;;;AAAV;AAAP;AACO;;AAAkB;;AAAlB;AAAP;AAtB+C;AAAA;;AAAA;AAAA;AA2BnC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACC;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AACE;;AAAA;AACH;;AAAA;AAGoB;;AAEtB;;AAAA;AATA;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAKE;AALF;AAMI;;AANJ;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUO;;AAVP;AAWM;;AAXN;AAYO;;AAZP;AAAA;;AAAA;AAAA;AAAA;AAeV;;AAAA;AArCyD;AAAA;AAAA;AAqCzD;AAAA;;AAAA;AAAA;AAC0B;AAAK;AAAL;AA1CqB;;AA0C/C;AAAA;AACA;AAYF;;;AAES;;AAAA;AArDkD;AAAA;;AAAA;AAAA;AAAA;;AAqD3B;AAAA;AAAA;;AAA9B;AACiC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGvB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAS;AAAZ;AAAP;AACc;;AAAqB;;AAAA;;;AAAA;;AAAS;;AAAT;;AAAS;AAArC;AAAP;AAGA;;AAAA;AACe;;AAAA;;AAAR;;AAAA;AAAP;AACe;;AAAA;;AAAoB;;AAA5B;AAAP;AACe;;AAAA;;AAAe;;AAAvB;AAAP;AAnE4C;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyEb;;AACpB;AAAA;AAAA;;AAAA;AACD;;AAAA;AAJA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKC;AALD;AAOV;;AAAA;AA1EmD;;AAAA;AAAA;AA0EnD;AAAA;AAC+B;AAAR;AA/EqB;;AA+E5C;AAAA;AAGI;AAAmB;;AAAc;AAAjC;AACkB;;AAAa;AACnC;;AAAA;;;AACE;;AAAA;;AAAS;AAAT;;AAMe;;AAAA;AACD;;AAAA;AAHiB;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKhB;;AAAA;AAAA;;AAAA;AAAA;AAEA;;AAAA;;AAAA;AATE;;AAAA;;AAAQ;AAAR;;;;;AAgBJ;;;AAES;;AAAA;AAtGkD;AAAA;AAAA;AAsG3B;AAAA;AAAA;;AAA9B;AACiC;AAAA;AAAA;AAEnB;;AAAqB;;AAAA;;;AAAS;;AAAT;;AAAS;AAArC;;AAAA;AAAP;AACU;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAS;AAAZ;AAAP;AAC4B;;AAAoB;;AAAA;;;AAAzC;AAAA;;AAAA;AAAP;AAKc;;AAAA;AAHmB;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAEJ;;;AAFI;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAKhB;;AAAA;;AAAA;AACO;AAAP;AAQF;;;;;;AAES;;AAAA;AA5H4C;;AAAA;AAAA;AAAA;;AA4H3B;AAAA;;AAAxB;AAC2B;AAAA;AAAA;AAAA;;AAAA;AACjB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAQ;AAAX;AAAP;AAEyB;AAAA;;;AAAA;AAAA;AAAS;AAAxB;AAjI+C;AAAA;AAAA;AAAA;AAiIf;AAAA;AAAA;AAAA;;AAAA;AACjC;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAS;AAAlB;AAEkB;AAAA;;;AAAA;AAAW;AAAX;;AAAW;AAAY;;AAAA;;;AAAA;;AAAY;;AAAZ;;AAAY;AAArC;AAAV;AAAA;;AACqB;AAAA;;;AAAA;;AAArB;AAAqB;;AAAc;AAAnC;;AACoB;AAAA;;;AAAA;;AAAA;;AAAa;AAAjC;AAGD;;;AAAa;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAQ;AAArB;;;AAAiC;;AAAA;;;AAAe;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAQ;AAAX;;;AAEpB;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AACD;;AAAA;AAAA;;AAE3B;;;AAEE;;AAAW;;AAAO;AAsBpB;AAGuB;;AAAP;;;;;;;AAHhB;;;AAIS;;;AAJT;AAY6B;;AAAA;AAAA;;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AAAd;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAA+B;;;AAA/B;AACjB;;AAAA;AAAA;AACO;AAAP;;AAAA;AAnCS;;AAAA;;;AAEL;;AAAW;;AAAO;;;;AAGgB;;AAAP;;AAAO;AAAT;AAAA;;AAAA;AAAnB;;AAAkB;AAGS;;AAAA;AAAA;;;AAAO;;AAAP;;AAAO;AAAlB;;AAAA;AADA;;;AACD;AACQ;;AAAA;;AAAA;AAA7B;;AAAU;AAAV;;AAG8C;;AAAd;;AAAc;AAAhB;AAGb;AAFkB;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIlB;;AAAA;AAAA;;AAAA;AAAA;;;;AAwBN;;;AAES;;AAAA;AA5LkD;AAAA;AAAA;AA4L3B;AAAA;AAAA;;AAA9B;AACiC;AAAA;AAAA;AAEL;;AAAoB;;AAAA;;;AAAzC;AAAA;;AAAA;AAAP;AACM;;AAAQ;;AAAc;AAC5B;AAAA;AAGiC;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAA;;AAAA;;;AAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAwC;;AAAxC;AAAA;;AAAA;AAAA;AAAA;AAChB;;AAAA;;AAAA;;AAAA;AAAA;AAEA;;;;;AAAA;;;AAA4D;;;AAA5D;AACO;AAAP;AAMF;;;AAES;;AAAA;AAhNkD;AAAA;AAAA;AAgN3B;AAAA;AAAA;;AAA9B;AAC8B;AAAA;AAA9B;AAMF;;;AAES;;AAAA;AAxN4C;;AAAA;AAAA;AAwN3B;AAAA;AAAA;;AAAxB;AACwB;AAAA;AAAxB",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 125 160 320"
    },
    "10": {
      "op": "bytecblock 0x00 0x151f7c75 \"markets\" 0x007d 0x0000000000000000 \"bets\" \"nextMarketId\" \"nextBetId\""
    },
    "67": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "69": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "72": {
      "op": "pushbytess 0x64b5560a 0x9c389167 0x7e74e258 0xc6e03605 0x708e6ca5 0x9c791a4a 0x36412c97 // method \"createMarket(string,string,uint64,uint64,account,uint64)uint64\", method \"placeBet(uint64,bool,uint64,pay)uint64\", method \"resolveMarket(uint64,uint64)bool\", method \"settleBet(uint64)bool\", method \"withdrawFees(uint64)bool\", method \"getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)\", method \"getBet(uint64)(uint64,address,bool,uint64,bool)\"",
      "defined_out": [
        "Method(createMarket(string,string,uint64,uint64,account,uint64)uint64)",
        "Method(getBet(uint64)(uint64,address,bool,uint64,bool))",
        "Method(getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64))",
        "Method(placeBet(uint64,bool,uint64,pay)uint64)",
        "Method(resolveMarket(uint64,uint64)bool)",
        "Method(settleBet(uint64)bool)",
        "Method(withdrawFees(uint64)bool)"
      ],
      "stack_out": [
        "Method(createMarket(string,string,uint64,uint64,account,uint64)uint64)",
        "Method(placeBet(uint64,bool,uint64,pay)uint64)",
        "Method(resolveMarket(uint64,uint64)bool)",
        "Method(settleBet(uint64)bool)",
        "Method(withdrawFees(uint64)bool)",
        "Method(getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64))",
        "Method(getBet(uint64)(uint64,address,bool,uint64,bool))"
      ]
    },
    "109": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createMarket(string,string,uint64,uint64,account,uint64)uint64)",
        "Method(getBet(uint64)(uint64,address,bool,uint64,bool))",
        "Method(getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64))",
        "Method(placeBet(uint64,bool,uint64,pay)uint64)",
        "Method(resolveMarket(uint64,uint64)bool)",
        "Method(settleBet(uint64)bool)",
        "Method(withdrawFees(uint64)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createMarket(string,string,uint64,uint64,account,uint64)uint64)",
        "Method(placeBet(uint64,bool,uint64,pay)uint64)",
        "Method(resolveMarket(uint64,uint64)bool)",
        "Method(settleBet(uint64)bool)",
        "Method(withdrawFees(uint64)bool)",
        "Method(getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64))",
        "Method(getBet(uint64)(uint64,address,bool,uint64,bool))",
        "tmp%2#0"
      ]
    },
    "112": {
      "op": "match main_createMarket_route@3 main_placeBet_route@4 main_resolveMarket_route@5 main_settleBet_route@6 main_withdrawFees_route@7 main_getMarket_route@8 main_getBet_route@9",
      "stack_out": []
    },
    "128": {
      "block": "main_after_if_else@16",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "129": {
      "op": "return",
      "stack_out": []
    },
    "130": {
      "block": "main_getBet_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "132": {
      "op": "!",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "133": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "134": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "136": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "137": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%10#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%10#0"
      ]
    },
    "140": {
      "op": "btoi",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "141": {
      "callsub": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.getBet",
      "op": "callsub getBet",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "144": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0",
        "0x151f7c75"
      ]
    },
    "145": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%57#0"
      ]
    },
    "146": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "147": {
      "op": "log",
      "stack_out": []
    },
    "148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "return",
      "stack_out": []
    },
    "150": {
      "block": "main_getMarket_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "152": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "153": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "154": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "156": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "157": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "160": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "161": {
      "callsub": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.getMarket",
      "op": "callsub getMarket",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "164": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "0x151f7c75"
      ]
    },
    "165": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%50#0"
      ]
    },
    "166": {
      "op": "concat",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "167": {
      "op": "log",
      "stack_out": []
    },
    "168": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "169": {
      "op": "return",
      "stack_out": []
    },
    "170": {
      "block": "main_withdrawFees_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "172": {
      "op": "!",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "173": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "174": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "176": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "177": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "180": {
      "op": "btoi",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "181": {
      "callsub": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.withdrawFees",
      "op": "callsub withdrawFees",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "184": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "185": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "186": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "188": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "189": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "190": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "191": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "192": {
      "op": "log",
      "stack_out": []
    },
    "193": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "194": {
      "op": "return",
      "stack_out": []
    },
    "195": {
      "block": "main_settleBet_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "197": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "198": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "199": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "201": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "202": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "205": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "206": {
      "callsub": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.settleBet",
      "op": "callsub settleBet",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "209": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "210": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "211": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "213": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "214": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "215": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "216": {
      "op": "concat",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "217": {
      "op": "log",
      "stack_out": []
    },
    "218": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "219": {
      "op": "return",
      "stack_out": []
    },
    "220": {
      "block": "main_resolveMarket_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "222": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "223": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "224": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "226": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "227": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "230": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "231": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%6#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "234": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "235": {
      "callsub": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.resolveMarket",
      "op": "callsub resolveMarket",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "238": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "239": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "240": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "242": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "243": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "244": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "245": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "246": {
      "op": "log",
      "stack_out": []
    },
    "247": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "return",
      "stack_out": []
    },
    "249": {
      "block": "main_placeBet_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "251": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "252": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "253": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "255": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "256": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "259": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "260": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "263": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%1#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "reinterpret_bytes[1]%1#0",
        "0"
      ]
    },
    "264": {
      "op": "getbit",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "265": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "268": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "269": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "271": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0",
        "1"
      ]
    },
    "272": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%0#0"
      ]
    },
    "273": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "274": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "276": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "277": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "278": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%0#0"
      ]
    },
    "279": {
      "callsub": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.placeBet",
      "op": "callsub placeBet",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "282": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "283": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "285": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "286": {
      "op": "log",
      "stack_out": []
    },
    "287": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "288": {
      "op": "return",
      "stack_out": []
    },
    "289": {
      "block": "main_createMarket_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "291": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "292": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "293": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "295": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "296": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "299": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "302": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "305": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "308": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "311": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "312": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "315": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "316": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "319": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "320": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "322": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "325": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "326": {
      "callsub": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.createMarket",
      "op": "callsub createMarket",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "330": {
      "op": "bytec_1 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "331": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "332": {
      "op": "concat",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "333": {
      "op": "log",
      "stack_out": []
    },
    "334": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "335": {
      "op": "return",
      "stack_out": []
    },
    "336": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "338": {
      "op": "bnz main_after_if_else@16",
      "stack_out": []
    },
    "341": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "343": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "344": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "345": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "346": {
      "op": "return",
      "stack_out": []
    },
    "347": {
      "subroutine": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.createMarket",
      "params": {
        "platform#0": "bytes",
        "contentId#0": "bytes",
        "targetCount#0": "uint64",
        "deadline#0": "uint64",
        "oracle#0": "bytes",
        "feeBps#0": "uint64"
      },
      "block": "createMarket",
      "stack_in": [],
      "op": "proto 6 1"
    },
    "350": {
      "op": "frame_dig -1",
      "defined_out": [
        "feeBps#0 (copy)"
      ],
      "stack_out": [
        "feeBps#0 (copy)"
      ]
    },
    "352": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "feeBps#0 (copy)"
      ],
      "stack_out": [
        "feeBps#0 (copy)",
        "1000"
      ]
    },
    "355": {
      "op": "<=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "356": {
      "error": "fee too high",
      "op": "assert // fee too high",
      "stack_out": []
    },
    "357": {
      "op": "frame_dig -3",
      "defined_out": [
        "deadline#0 (copy)"
      ],
      "stack_out": [
        "deadline#0 (copy)"
      ]
    },
    "359": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "deadline#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "deadline#0 (copy)",
        "tmp%1#0"
      ]
    },
    "361": {
      "op": ">",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "362": {
      "error": "deadline in past",
      "op": "assert // deadline in past",
      "stack_out": []
    },
    "363": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "364": {
      "op": "bytec 6 // \"nextMarketId\"",
      "defined_out": [
        "\"nextMarketId\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"nextMarketId\""
      ]
    },
    "366": {
      "op": "app_global_get_ex",
      "defined_out": [
        "id#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "id#0",
        "maybe_exists%0#0"
      ]
    },
    "367": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "id#0"
      ]
    },
    "368": {
      "op": "frame_dig -6",
      "defined_out": [
        "id#0",
        "platform#0 (copy)"
      ],
      "stack_out": [
        "id#0",
        "platform#0 (copy)"
      ]
    },
    "370": {
      "op": "len",
      "defined_out": [
        "id#0",
        "length%0#0"
      ],
      "stack_out": [
        "id#0",
        "length%0#0"
      ]
    },
    "371": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "as_bytes%0#0"
      ]
    },
    "372": {
      "op": "extract 6 2",
      "defined_out": [
        "id#0",
        "length_uint16%0#0"
      ],
      "stack_out": [
        "id#0",
        "length_uint16%0#0"
      ]
    },
    "375": {
      "op": "frame_dig -6",
      "stack_out": [
        "id#0",
        "length_uint16%0#0",
        "platform#0 (copy)"
      ]
    },
    "377": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0"
      ]
    },
    "378": {
      "op": "frame_dig -5",
      "defined_out": [
        "contentId#0 (copy)",
        "encoded_value%0#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "contentId#0 (copy)"
      ]
    },
    "380": {
      "op": "len",
      "defined_out": [
        "encoded_value%0#0",
        "id#0",
        "length%1#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "length%1#0"
      ]
    },
    "381": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_value%0#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "as_bytes%1#0"
      ]
    },
    "382": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "id#0",
        "length_uint16%1#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "length_uint16%1#0"
      ]
    },
    "385": {
      "op": "frame_dig -5",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "contentId#0 (copy)"
      ]
    },
    "387": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "388": {
      "op": "frame_dig -4",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "targetCount#0 (copy)"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "targetCount#0 (copy)"
      ]
    },
    "390": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "391": {
      "op": "frame_dig -3",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "deadline#0 (copy)"
      ]
    },
    "393": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "394": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0"
      ]
    },
    "396": {
      "op": "frame_dig -1",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "feeBps#0 (copy)"
      ]
    },
    "398": {
      "op": "itob",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0"
      ]
    },
    "399": {
      "op": "dig 5",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "401": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "data_length%0#0"
      ]
    },
    "402": {
      "op": "intc_2 // 125",
      "defined_out": [
        "125",
        "data_length%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "data_length%0#0",
        "125"
      ]
    },
    "403": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "current_tail_offset%1#0"
      ]
    },
    "404": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "as_bytes%3#0"
      ]
    },
    "405": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "offset_as_uint16%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "offset_as_uint16%1#0"
      ]
    },
    "408": {
      "op": "bytec_3 // 0x007d",
      "defined_out": [
        "0x007d",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "offset_as_uint16%1#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "offset_as_uint16%1#0",
        "0x007d"
      ]
    },
    "409": {
      "op": "swap",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "0x007d",
        "offset_as_uint16%1#0"
      ]
    },
    "410": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "411": {
      "op": "uncover 4",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%0#0"
      ]
    },
    "413": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "414": {
      "op": "uncover 3",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "416": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "417": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "418": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "419": {
      "op": "bytec 4 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%5#0",
        "0x0000000000000000"
      ]
    },
    "421": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "tmp%3#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%3#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "422": {
      "op": "uncover 2",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%6#0",
        "tmp%3#0"
      ]
    },
    "424": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "425": {
      "op": "frame_dig -2",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "oracle#0 (copy)",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%7#0",
        "oracle#0 (copy)"
      ]
    },
    "427": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "val_as_bytes%2#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "428": {
      "op": "swap",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%8#0",
        "val_as_bytes%2#0"
      ]
    },
    "429": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "430": {
      "op": "bytec 4 // 0x0000000000000000",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%9#0",
        "0x0000000000000000"
      ]
    },
    "432": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "433": {
      "op": "bytec 4 // 0x0000000000000000",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%10#0",
        "0x0000000000000000"
      ]
    },
    "435": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "436": {
      "op": "bytec 4 // 0x0000000000000000",
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%11#0",
        "0x0000000000000000"
      ]
    },
    "438": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "439": {
      "op": "uncover 2",
      "stack_out": [
        "id#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%12#0",
        "encoded_value%0#0"
      ]
    },
    "441": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%1#0",
        "id#0"
      ],
      "stack_out": [
        "id#0",
        "encoded_value%1#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "442": {
      "op": "swap",
      "stack_out": [
        "id#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%1#0"
      ]
    },
    "443": {
      "op": "concat",
      "defined_out": [
        "id#0",
        "m#0"
      ],
      "stack_out": [
        "id#0",
        "m#0"
      ]
    },
    "444": {
      "op": "dig 1",
      "defined_out": [
        "id#0",
        "id#0 (copy)",
        "m#0"
      ],
      "stack_out": [
        "id#0",
        "m#0",
        "id#0 (copy)"
      ]
    },
    "446": {
      "op": "itob",
      "defined_out": [
        "id#0",
        "m#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "id#0",
        "m#0",
        "tmp%4#0"
      ]
    },
    "447": {
      "op": "bytec_2 // \"markets\"",
      "defined_out": [
        "\"markets\"",
        "id#0",
        "m#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "id#0",
        "m#0",
        "tmp%4#0",
        "\"markets\""
      ]
    },
    "448": {
      "op": "swap",
      "stack_out": [
        "id#0",
        "m#0",
        "\"markets\"",
        "tmp%4#0"
      ]
    },
    "449": {
      "op": "concat",
      "defined_out": [
        "id#0",
        "m#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "id#0",
        "m#0",
        "tmp%5#0"
      ]
    },
    "450": {
      "op": "dup",
      "defined_out": [
        "id#0",
        "m#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "id#0",
        "m#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "451": {
      "op": "box_del",
      "defined_out": [
        "id#0",
        "m#0",
        "tmp%5#0",
        "{box_del}"
      ],
      "stack_out": [
        "id#0",
        "m#0",
        "tmp%5#0",
        "{box_del}"
      ]
    },
    "452": {
      "op": "pop",
      "stack_out": [
        "id#0",
        "m#0",
        "tmp%5#0"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "id#0",
        "tmp%5#0",
        "m#0"
      ]
    },
    "454": {
      "op": "box_put",
      "stack_out": [
        "id#0"
      ]
    },
    "455": {
      "op": "dup",
      "stack_out": [
        "id#0",
        "id#0 (copy)"
      ]
    },
    "456": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "id#0",
        "id#0 (copy)"
      ],
      "stack_out": [
        "id#0",
        "id#0 (copy)",
        "1"
      ]
    },
    "457": {
      "op": "+",
      "defined_out": [
        "id#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "id#0",
        "new_state_value%0#0"
      ]
    },
    "458": {
      "op": "bytec 6 // \"nextMarketId\"",
      "stack_out": [
        "id#0",
        "new_state_value%0#0",
        "\"nextMarketId\""
      ]
    },
    "460": {
      "op": "swap",
      "stack_out": [
        "id#0",
        "\"nextMarketId\"",
        "new_state_value%0#0"
      ]
    },
    "461": {
      "op": "app_global_put",
      "stack_out": [
        "id#0"
      ]
    },
    "462": {
      "retsub": true,
      "op": "retsub"
    },
    "463": {
      "subroutine": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.placeBet",
      "params": {
        "marketId#0": "uint64",
        "sideYes#0": "uint64",
        "amount#0": "uint64",
        "payment#0": "uint64"
      },
      "block": "placeBet",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "466": {
      "op": "frame_dig -4",
      "defined_out": [
        "marketId#0 (copy)"
      ],
      "stack_out": [
        "marketId#0 (copy)"
      ]
    },
    "468": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "469": {
      "op": "bytec_2 // \"markets\"",
      "defined_out": [
        "\"markets\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"markets\""
      ]
    },
    "470": {
      "op": "dig 1",
      "defined_out": [
        "\"markets\"",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"markets\"",
        "tmp%0#0 (copy)"
      ]
    },
    "472": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "473": {
      "op": "dup",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "474": {
      "op": "cover 2",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "476": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "477": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "478": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "480": {
      "error": "market not found",
      "op": "assert // market not found",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "481": {
      "op": "box_get",
      "defined_out": [
        "m#0",
        "maybe_exists%1#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "m#0",
        "maybe_exists%1#0"
      ]
    },
    "482": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "m#0"
      ]
    },
    "483": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "maybe_exists%1#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "484": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%0#0",
        "m#0",
        "maybe_exists%1#0",
        "m#0"
      ]
    },
    "486": {
      "op": "cover 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "maybe_exists%1#0"
      ]
    },
    "488": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0"
      ]
    },
    "489": {
      "op": "dup",
      "defined_out": [
        "m#0",
        "m#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "490": {
      "op": "intc_3 // 160",
      "defined_out": [
        "160",
        "m#0",
        "m#0 (copy)",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "m#0 (copy)",
        "160"
      ]
    },
    "491": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "is_true%0#0"
      ]
    },
    "492": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "493": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "494": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "496": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "encoded_bool%0#0"
      ]
    },
    "497": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%0#0",
        "m#0",
        "encoded_bool%0#0",
        "encoded_bool%0#0"
      ]
    },
    "498": {
      "op": "cover 3",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0",
        "encoded_bool%0#0"
      ]
    },
    "500": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "501": {
      "op": "getbit",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0",
        "tmp%4#0"
      ]
    },
    "502": {
      "op": "!",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0",
        "tmp%5#0"
      ]
    },
    "503": {
      "error": "market resolved",
      "op": "assert // market resolved",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0"
      ]
    },
    "504": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0",
        "tmp%6#0"
      ]
    },
    "506": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0",
        "tmp%6#0",
        "m#0 (copy)"
      ]
    },
    "508": {
      "error": "Index access is out of bounds",
      "op": "extract 12 8 // on error: Index access is out of bounds",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "m#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "511": {
      "op": "cover 3",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%6#0"
      ]
    },
    "513": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%6#0",
        "m#0 (copy)"
      ]
    },
    "515": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "encoded_bool%0#0",
        "m#0",
        "m#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%6#0",
        "m#0 (copy)",
        "12"
      ]
    },
    "517": {
      "op": "extract_uint64",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "518": {
      "op": "<=",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%9#0"
      ]
    },
    "519": {
      "error": "betting closed",
      "op": "assert // betting closed",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0"
      ]
    },
    "520": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "amount#0 (copy)"
      ]
    },
    "522": {
      "error": "amount=0",
      "op": "assert // amount=0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0"
      ]
    },
    "523": {
      "op": "frame_dig -1",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "payment#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "payment#0 (copy)"
      ]
    },
    "525": {
      "op": "gtxns Amount",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%11#0"
      ]
    },
    "527": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%11#0",
        "amount#0 (copy)"
      ]
    },
    "529": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%12#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%12#0"
      ]
    },
    "530": {
      "error": "bad amount",
      "op": "assert // bad amount",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0"
      ]
    },
    "531": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "payment#0 (copy)"
      ]
    },
    "533": {
      "op": "gtxns Receiver",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%13#0"
      ]
    },
    "535": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "537": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%15#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%15#0"
      ]
    },
    "538": {
      "error": "bad receiver",
      "op": "assert // bad receiver",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0"
      ]
    },
    "539": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "payment#0 (copy)"
      ]
    },
    "541": {
      "op": "gtxns Sender",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%16#0"
      ]
    },
    "543": {
      "op": "txn Sender",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "545": {
      "op": "==",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%18#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "tmp%18#0"
      ]
    },
    "546": {
      "error": "bad sender",
      "op": "assert // bad sender",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0"
      ]
    },
    "547": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "0"
      ]
    },
    "548": {
      "op": "bytec 7 // \"nextBetId\"",
      "defined_out": [
        "\"nextBetId\"",
        "0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "0",
        "\"nextBetId\""
      ]
    },
    "550": {
      "op": "app_global_get_ex",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "maybe_exists%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "maybe_exists%2#0"
      ]
    },
    "551": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "maybe_exists%2#0",
        "betId#0"
      ]
    },
    "552": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "maybe_exists%2#0",
        "betId#0",
        "betId#0 (copy)"
      ]
    },
    "553": {
      "op": "cover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "maybe_exists%2#0",
        "betId#0"
      ]
    },
    "555": {
      "op": "cover 4",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "maybe_exists%2#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "maybe_exists%2#0"
      ]
    },
    "557": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0"
      ]
    },
    "558": {
      "op": "txn Sender",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%19#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "tmp%19#0"
      ]
    },
    "560": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "tmp%19#0",
        "0x00"
      ]
    },
    "561": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "tmp%19#0",
        "0x00",
        "0"
      ]
    },
    "562": {
      "op": "frame_dig -3",
      "defined_out": [
        "0",
        "0x00",
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "sideYes#0 (copy)",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%19#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "tmp%19#0",
        "0x00",
        "0",
        "sideYes#0 (copy)"
      ]
    },
    "564": {
      "op": "setbit",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%19#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "tmp%19#0",
        "encoded_bool%1#0"
      ]
    },
    "565": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "tmp%19#0",
        "encoded_bool%1#0",
        "amount#0 (copy)"
      ]
    },
    "567": {
      "op": "itob",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%0#0",
        "tmp%1#0",
        "tmp%19#0",
        "tmp%7#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "tmp%0#0",
        "m#0",
        "betId#0",
        "tmp%19#0",
        "encoded_bool%1#0",
        "val_as_bytes%1#0"
      ]
    },
    "568": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "tmp%19#0",
        "encoded_bool%1#0",
        "val_as_bytes%1#0",
        "tmp%0#0"
      ]
    },
    "570": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "encoded_bool%1#0",
        "val_as_bytes%1#0",
        "tmp%0#0",
        "tmp%19#0"
      ]
    },
    "572": {
      "op": "concat",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%2#0",
        "m#0",
        "tmp%1#0",
        "tmp%7#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "encoded_bool%1#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "573": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%1#0"
      ]
    },
    "575": {
      "op": "concat",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "m#0",
        "tmp%1#0",
        "tmp%7#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "val_as_bytes%1#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "576": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%1#0"
      ]
    },
    "577": {
      "op": "concat",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "m#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "578": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "encoded_tuple_buffer%4#0",
        "0x00"
      ]
    },
    "579": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "b#0"
      ]
    },
    "580": {
      "op": "dig 1",
      "defined_out": [
        "b#0",
        "betId#0",
        "betId#0 (copy)",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "b#0",
        "betId#0 (copy)"
      ]
    },
    "582": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%20#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "b#0",
        "tmp%20#0"
      ]
    },
    "583": {
      "op": "bytec 5 // \"bets\"",
      "defined_out": [
        "\"bets\"",
        "b#0",
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%20#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "b#0",
        "tmp%20#0",
        "\"bets\""
      ]
    },
    "585": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "b#0",
        "\"bets\"",
        "tmp%20#0"
      ]
    },
    "586": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%21#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "b#0",
        "tmp%21#0"
      ]
    },
    "587": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "tmp%21#0",
        "b#0"
      ]
    },
    "588": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0"
      ]
    },
    "589": {
      "op": "intc_1 // 1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "betId#0",
        "1"
      ]
    },
    "590": {
      "op": "+",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "new_state_value%0#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "new_state_value%0#0"
      ]
    },
    "591": {
      "op": "bytec 7 // \"nextBetId\"",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "new_state_value%0#0",
        "\"nextBetId\""
      ]
    },
    "593": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "\"nextBetId\"",
        "new_state_value%0#0"
      ]
    },
    "594": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0"
      ]
    },
    "595": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "596": {
      "op": "pushint 101 // 101",
      "defined_out": [
        "101",
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "m#0 (copy)",
        "101"
      ]
    },
    "598": {
      "op": "extract_uint64",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "m#0",
        "newYes#0"
      ]
    },
    "599": {
      "op": "swap",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "m#0"
      ]
    },
    "600": {
      "op": "pushint 109 // 109",
      "defined_out": [
        "109",
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "m#0",
        "109"
      ]
    },
    "602": {
      "op": "extract_uint64",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0"
      ]
    },
    "603": {
      "op": "frame_dig -3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "sideYes#0 (copy)"
      ]
    },
    "605": {
      "op": "bz placeBet_else_body@2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0"
      ]
    },
    "608": {
      "op": "frame_dig 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "newYes#0"
      ]
    },
    "610": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "newYes#0",
        "amount#0 (copy)"
      ]
    },
    "612": {
      "op": "+",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "newYes#0"
      ]
    },
    "613": {
      "op": "frame_bury 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0"
      ]
    },
    "615": {
      "block": "placeBet_after_if_else@3",
      "stack_in": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "newYes#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "newYes#0"
      ]
    },
    "617": {
      "op": "itob",
      "defined_out": [
        "newYes#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0"
      ]
    },
    "618": {
      "op": "frame_dig 6",
      "defined_out": [
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "newNo#0"
      ]
    },
    "620": {
      "op": "itob",
      "defined_out": [
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "621": {
      "op": "frame_dig 1",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0"
      ]
    },
    "623": {
      "op": "dup",
      "defined_out": [
        "m#0",
        "m#0 (copy)",
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "624": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "m#0",
        "m#0 (copy)",
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "m#0 (copy)",
        "0"
      ]
    },
    "625": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_start_offset%0#0"
      ]
    },
    "626": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_start_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "628": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "m#0",
        "m#0 (copy)",
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_start_offset%0#0",
        "m#0 (copy)",
        "2"
      ]
    },
    "630": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "631": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "633": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "635": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "m#0",
        "m#0 (copy)",
        "newNo#0",
        "newYes#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "637": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_end_offset%0#0",
        "tmp%24#0"
      ]
    },
    "638": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_end_offset%0#0",
        "tmp%24#0",
        "m#0 (copy)"
      ]
    },
    "640": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_end_offset%0#0",
        "tmp%24#0",
        "item_end_offset%1#0"
      ]
    },
    "641": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "item_end_offset%0#0",
        "tmp%24#0",
        "item_end_offset%1#0",
        "m#0 (copy)"
      ]
    },
    "643": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "item_end_offset%1#0",
        "m#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "645": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "m#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "647": {
      "op": "substring3",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "648": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "m#0 (copy)"
      ]
    },
    "650": {
      "error": "Index access is out of bounds",
      "op": "extract 4 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "653": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "m#0 (copy)"
      ]
    },
    "655": {
      "error": "Index access is out of bounds",
      "op": "extract 21 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "658": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "m#0 (copy)"
      ]
    },
    "660": {
      "error": "Index access is out of bounds",
      "op": "extract 29 32 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "663": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "m#0 (copy)"
      ]
    },
    "665": {
      "error": "Index access is out of bounds",
      "op": "extract 61 32 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "668": {
      "op": "dig 6",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "m#0 (copy)"
      ]
    },
    "670": {
      "error": "Index access is out of bounds",
      "op": "extract 93 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "m#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "673": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "m#0"
      ]
    },
    "675": {
      "error": "Index access is out of bounds",
      "op": "extract 117 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "678": {
      "op": "dig 7",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%24#0 (copy)"
      ]
    },
    "680": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "data_length%0#0"
      ]
    },
    "681": {
      "op": "intc_2 // 125",
      "defined_out": [
        "125",
        "data_length%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "data_length%0#0",
        "125"
      ]
    },
    "682": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "current_tail_offset%2#0"
      ]
    },
    "683": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "as_bytes%1#0"
      ]
    },
    "684": {
      "op": "extract 6 2",
      "defined_out": [
        "m#0",
        "newNo#0",
        "newYes#0",
        "offset_as_uint16%1#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "offset_as_uint16%1#0"
      ]
    },
    "687": {
      "op": "bytec_3 // 0x007d",
      "defined_out": [
        "0x007d",
        "m#0",
        "newNo#0",
        "newYes#0",
        "offset_as_uint16%1#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "offset_as_uint16%1#0",
        "0x007d"
      ]
    },
    "688": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "0x007d",
        "offset_as_uint16%1#0"
      ]
    },
    "689": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "690": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%8#0",
        "tmp%26#0"
      ]
    },
    "692": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "693": {
      "op": "frame_dig 3",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%9#0",
        "tmp%7#0"
      ]
    },
    "695": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "696": {
      "op": "frame_dig 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%10#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%10#0",
        "encoded_bool%0#0"
      ]
    },
    "698": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%11#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%28#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "699": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%11#0",
        "tmp%28#0"
      ]
    },
    "701": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%12#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "702": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%12#0",
        "tmp%29#0"
      ]
    },
    "704": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%13#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "705": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%13#0",
        "tmp%30#0"
      ]
    },
    "707": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%14#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%31#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%31#0",
        "tmp%32#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "708": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "encoded_tuple_buffer%14#0",
        "tmp%31#0"
      ]
    },
    "710": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%15#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "encoded_tuple_buffer%15#0"
      ]
    },
    "711": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "encoded_tuple_buffer%15#0",
        "val_as_bytes%2#0"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%16#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "tmp%7#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "val_as_bytes%3#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "encoded_tuple_buffer%16#0"
      ]
    },
    "714": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "encoded_tuple_buffer%16#0",
        "val_as_bytes%3#0"
      ]
    },
    "716": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%17#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%32#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "717": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "tmp%24#0",
        "tmp%25#0",
        "encoded_tuple_buffer%17#0",
        "tmp%32#0"
      ]
    },
    "718": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%18#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "tmp%24#0",
        "tmp%25#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "719": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "tmp%25#0",
        "encoded_tuple_buffer%18#0",
        "tmp%24#0"
      ]
    },
    "721": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%19#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%25#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "tmp%25#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "722": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "encoded_tuple_buffer%19#0",
        "tmp%25#0"
      ]
    },
    "723": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%7#0",
        "updated#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "updated#0"
      ]
    },
    "724": {
      "op": "frame_dig 0",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%7#0",
        "updated#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "updated#0",
        "tmp%1#0"
      ]
    },
    "726": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%1#0 (copy)",
        "tmp%7#0",
        "updated#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "updated#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "727": {
      "op": "box_del",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%7#0",
        "updated#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "updated#0",
        "tmp%1#0",
        "{box_del}"
      ]
    },
    "728": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "updated#0",
        "tmp%1#0"
      ]
    },
    "729": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "tmp%1#0",
        "updated#0"
      ]
    },
    "730": {
      "op": "box_put",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0"
      ]
    },
    "731": {
      "op": "frame_dig 4",
      "defined_out": [
        "betId#0",
        "encoded_bool%0#0",
        "m#0",
        "newNo#0",
        "newYes#0",
        "tmp%1#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "betId#0"
      ]
    },
    "733": {
      "op": "frame_bury 0"
    },
    "735": {
      "retsub": true,
      "op": "retsub"
    },
    "736": {
      "block": "placeBet_else_body@2",
      "stack_in": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "newNo#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "newNo#0"
      ]
    },
    "738": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "newNo#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "newNo#0",
        "amount#0 (copy)"
      ]
    },
    "740": {
      "op": "+",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0",
        "newNo#0"
      ]
    },
    "741": {
      "op": "frame_bury 6",
      "defined_out": [
        "newNo#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "encoded_bool%0#0",
        "tmp%7#0",
        "betId#0",
        "newYes#0",
        "newNo#0"
      ]
    },
    "743": {
      "op": "b placeBet_after_if_else@3"
    },
    "746": {
      "subroutine": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.resolveMarket",
      "params": {
        "marketId#0": "uint64",
        "finalCount#0": "uint64"
      },
      "block": "resolveMarket",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "749": {
      "op": "frame_dig -2",
      "defined_out": [
        "marketId#0 (copy)"
      ],
      "stack_out": [
        "marketId#0 (copy)"
      ]
    },
    "751": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "752": {
      "op": "bytec_2 // \"markets\"",
      "defined_out": [
        "\"markets\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"markets\""
      ]
    },
    "753": {
      "op": "swap",
      "stack_out": [
        "\"markets\"",
        "tmp%0#0"
      ]
    },
    "754": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "755": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "756": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "757": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "759": {
      "error": "market not found",
      "op": "assert // market not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "760": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "761": {
      "op": "box_get",
      "defined_out": [
        "m#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "maybe_exists%1#0"
      ]
    },
    "762": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "m#0"
      ]
    },
    "763": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0"
      ]
    },
    "765": {
      "op": "dig 1",
      "defined_out": [
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0",
        "m#0 (copy)"
      ]
    },
    "767": {
      "error": "Index access is out of bounds",
      "op": "extract 12 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "770": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0",
        "tmp%5#0",
        "m#0 (copy)"
      ]
    },
    "772": {
      "op": "pushint 12 // 12",
      "defined_out": [
        "12",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0",
        "tmp%5#0",
        "m#0 (copy)",
        "12"
      ]
    },
    "774": {
      "op": "extract_uint64",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "775": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%4#0"
      ]
    },
    "777": {
      "op": "<=",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "778": {
      "error": "too early",
      "op": "assert // too early",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0"
      ]
    },
    "779": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "m#0 (copy)"
      ]
    },
    "781": {
      "op": "intc_3 // 160",
      "defined_out": [
        "160",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "m#0 (copy)",
        "160"
      ]
    },
    "782": {
      "op": "getbit",
      "defined_out": [
        "is_true%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "is_true%0#0"
      ]
    },
    "783": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "is_true%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "784": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "is_true%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "785": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "787": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "encoded_bool%0#0"
      ]
    },
    "788": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "789": {
      "op": "getbit",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "790": {
      "op": "!",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "791": {
      "error": "already resolved",
      "op": "assert // already resolved",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0"
      ]
    },
    "792": {
      "op": "txn Sender",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%10#0"
      ]
    },
    "794": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%10#0",
        "m#0 (copy)"
      ]
    },
    "796": {
      "error": "Index access is out of bounds",
      "op": "extract 61 32 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "799": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "tmp%10#0"
      ]
    },
    "800": {
      "op": "dig 1",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%11#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "tmp%10#0",
        "tmp%11#0 (copy)"
      ]
    },
    "802": {
      "op": "==",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "803": {
      "error": "not oracle",
      "op": "assert // not oracle",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0"
      ]
    },
    "804": {
      "op": "frame_dig -1",
      "defined_out": [
        "finalCount#0 (copy)",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "finalCount#0 (copy)"
      ]
    },
    "806": {
      "op": "itob",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0"
      ]
    },
    "807": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "m#0 (copy)"
      ]
    },
    "809": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "m#0 (copy)",
        "0"
      ]
    },
    "810": {
      "op": "extract_uint16",
      "defined_out": [
        "item_start_offset%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0"
      ]
    },
    "811": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "813": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "item_start_offset%0#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "m#0 (copy)",
        "2"
      ]
    },
    "815": {
      "op": "extract_uint16",
      "defined_out": [
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "816": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "818": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "820": {
      "op": "dig 2",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "822": {
      "op": "substring3",
      "defined_out": [
        "item_end_offset%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%13#0"
      ]
    },
    "823": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%13#0",
        "m#0 (copy)"
      ]
    },
    "825": {
      "op": "len",
      "defined_out": [
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%13#0",
        "item_end_offset%1#0"
      ]
    },
    "826": {
      "op": "dig 6",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%13#0",
        "item_end_offset%1#0",
        "m#0 (copy)"
      ]
    },
    "828": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "item_end_offset%1#0",
        "m#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "830": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "m#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "832": {
      "op": "substring3",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "833": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "m#0 (copy)"
      ]
    },
    "835": {
      "error": "Index access is out of bounds",
      "op": "extract 4 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "838": {
      "op": "dig 6",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "m#0 (copy)"
      ]
    },
    "840": {
      "error": "Index access is out of bounds",
      "op": "extract 29 32 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0"
      ]
    },
    "843": {
      "op": "dig 7",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "m#0 (copy)"
      ]
    },
    "845": {
      "error": "Index access is out of bounds",
      "op": "extract 93 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "848": {
      "op": "dig 8",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "m#0 (copy)"
      ]
    },
    "850": {
      "error": "Index access is out of bounds",
      "op": "extract 101 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "853": {
      "op": "dig 9",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "m#0 (copy)"
      ]
    },
    "855": {
      "error": "Index access is out of bounds",
      "op": "extract 109 8 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "858": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "m#0"
      ]
    },
    "860": {
      "error": "Index access is out of bounds",
      "op": "extract 117 8 // on error: Index access is out of bounds",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "863": {
      "op": "dig 7",
      "defined_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%13#0 (copy)",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%13#0 (copy)"
      ]
    },
    "865": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "data_length%0#0"
      ]
    },
    "866": {
      "op": "intc_2 // 125",
      "defined_out": [
        "125",
        "data_length%0#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "data_length%0#0",
        "125"
      ]
    },
    "867": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "current_tail_offset%1#0"
      ]
    },
    "868": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "as_bytes%1#0"
      ]
    },
    "869": {
      "op": "extract 6 2",
      "defined_out": [
        "offset_as_uint16%1#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "offset_as_uint16%1#0"
      ]
    },
    "872": {
      "op": "bytec_3 // 0x007d",
      "defined_out": [
        "0x007d",
        "offset_as_uint16%1#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "offset_as_uint16%1#0",
        "0x007d"
      ]
    },
    "873": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "0x007d",
        "offset_as_uint16%1#0"
      ]
    },
    "874": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "875": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%2#0",
        "tmp%15#0"
      ]
    },
    "877": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "tmp%5#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "878": {
      "op": "uncover 10",
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%3#0",
        "tmp%5#0"
      ]
    },
    "880": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "881": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%4#0",
        "0x80"
      ]
    },
    "884": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "val_as_bytes%0#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "885": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%0#0"
      ]
    },
    "887": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "888": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%6#0",
        "tmp%17#0"
      ]
    },
    "890": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "891": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%7#0",
        "tmp%11#0"
      ]
    },
    "893": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "894": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%8#0",
        "tmp%19#0"
      ]
    },
    "896": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%20#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "897": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%9#0",
        "tmp%20#0"
      ]
    },
    "899": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%21#0",
        "tmp%22#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "900": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%22#0",
        "encoded_tuple_buffer%10#0",
        "tmp%21#0"
      ]
    },
    "902": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%22#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "903": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "encoded_tuple_buffer%11#0",
        "tmp%22#0"
      ]
    },
    "904": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%13#0",
        "tmp%14#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "905": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%14#0",
        "encoded_tuple_buffer%12#0",
        "tmp%13#0"
      ]
    },
    "907": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "tmp%1#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%14#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "908": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "encoded_tuple_buffer%13#0",
        "tmp%14#0"
      ]
    },
    "909": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0",
        "updated#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "updated#0"
      ]
    },
    "910": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "updated#0",
        "tmp%1#0 (copy)"
      ]
    },
    "912": {
      "op": "box_del",
      "defined_out": [
        "tmp%1#0",
        "updated#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "updated#0",
        "{box_del}"
      ]
    },
    "913": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "updated#0"
      ]
    },
    "914": {
      "op": "box_put",
      "stack_out": []
    },
    "915": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "916": {
      "retsub": true,
      "op": "retsub"
    },
    "917": {
      "subroutine": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.settleBet",
      "params": {
        "betId#0": "uint64"
      },
      "block": "settleBet",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "920": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "losersPool#0"
      ]
    },
    "922": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0"
      ]
    },
    "923": {
      "op": "frame_dig -1",
      "defined_out": [
        "betId#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "betId#0 (copy)"
      ]
    },
    "925": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%0#0"
      ]
    },
    "926": {
      "op": "bytec 5 // \"bets\"",
      "defined_out": [
        "\"bets\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%0#0",
        "\"bets\""
      ]
    },
    "928": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "\"bets\"",
        "tmp%0#0"
      ]
    },
    "929": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0"
      ]
    },
    "930": {
      "op": "dupn 2",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "932": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "933": {
      "op": "bury 1",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "935": {
      "error": "bet not found",
      "op": "assert // bet not found",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "936": {
      "op": "box_get",
      "defined_out": [
        "b#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "maybe_exists%1#0"
      ]
    },
    "937": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "maybe_exists%1#0",
        "b#0"
      ]
    },
    "938": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "maybe_exists%1#0",
        "b#0",
        "b#0 (copy)"
      ]
    },
    "939": {
      "op": "uncover 2",
      "defined_out": [
        "b#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "maybe_exists%1#0"
      ]
    },
    "941": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0"
      ]
    },
    "942": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "b#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "b#0 (copy)"
      ]
    },
    "943": {
      "op": "pushint 392 // 392",
      "defined_out": [
        "392",
        "b#0",
        "b#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "b#0 (copy)",
        "392"
      ]
    },
    "946": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "is_true%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "is_true%0#0"
      ]
    },
    "947": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "b#0",
        "is_true%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "948": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "949": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "951": {
      "op": "setbit",
      "defined_out": [
        "b#0",
        "encoded_bool%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "encoded_bool%0#0"
      ]
    },
    "952": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "953": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "tmp%4#0"
      ]
    },
    "954": {
      "op": "!",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "tmp%5#0"
      ]
    },
    "955": {
      "error": "already settled",
      "op": "assert // already settled",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0"
      ]
    },
    "956": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "b#0 (copy)"
      ]
    },
    "957": {
      "error": "Index access is out of bounds",
      "op": "extract 0 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "b#0",
        "tmp%6#0"
      ]
    },
    "960": {
      "op": "swap",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "b#0"
      ]
    },
    "961": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "b#0",
        "0"
      ]
    },
    "962": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "963": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "964": {
      "op": "bytec_2 // \"markets\"",
      "defined_out": [
        "\"markets\"",
        "b#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%8#0",
        "\"markets\""
      ]
    },
    "965": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "\"markets\"",
        "tmp%8#0"
      ]
    },
    "966": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0"
      ]
    },
    "967": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "tmp%9#0"
      ]
    },
    "968": {
      "op": "box_get",
      "defined_out": [
        "b#0",
        "m#0",
        "maybe_exists%2#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "maybe_exists%2#0"
      ]
    },
    "969": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "maybe_exists%2#0",
        "m#0"
      ]
    },
    "970": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "maybe_exists%2#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "971": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "maybe_exists%2#0"
      ]
    },
    "973": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0"
      ]
    },
    "974": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "975": {
      "op": "intc_3 // 160",
      "defined_out": [
        "160",
        "b#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "m#0 (copy)",
        "160"
      ]
    },
    "976": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "is_true%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "is_true%1#0"
      ]
    },
    "977": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "is_true%1#0",
        "0x00"
      ]
    },
    "978": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "is_true%1#0",
        "0x00",
        "0"
      ]
    },
    "979": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "0x00",
        "0",
        "is_true%1#0"
      ]
    },
    "981": {
      "op": "setbit",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "encoded_bool%1#0"
      ]
    },
    "982": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "m#0",
        "encoded_bool%1#0",
        "encoded_bool%1#0"
      ]
    },
    "983": {
      "op": "cover 2",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "m#0",
        "encoded_bool%1#0"
      ]
    },
    "985": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "m#0",
        "encoded_bool%1#0",
        "0"
      ]
    },
    "986": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%10#0"
      ]
    },
    "987": {
      "error": "not resolved",
      "op": "assert // not resolved",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "m#0"
      ]
    },
    "988": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "989": {
      "error": "Index access is out of bounds",
      "op": "extract 21 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%11#0"
      ]
    },
    "992": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "m#0"
      ]
    },
    "993": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "994": {
      "op": "pushint 21 // 21",
      "defined_out": [
        "21",
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "m#0",
        "m#0 (copy)",
        "21"
      ]
    },
    "996": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "m#0",
        "tmp%12#0"
      ]
    },
    "997": {
      "op": "dig 1",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "m#0",
        "tmp%12#0",
        "m#0 (copy)"
      ]
    },
    "999": {
      "error": "Index access is out of bounds",
      "op": "extract 4 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "m#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1002": {
      "op": "cover 2",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "m#0",
        "tmp%12#0"
      ]
    },
    "1004": {
      "op": "dig 1",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "m#0",
        "tmp%12#0",
        "m#0 (copy)"
      ]
    },
    "1006": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4",
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "m#0",
        "tmp%12#0",
        "m#0 (copy)",
        "4"
      ]
    },
    "1008": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "m#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "1009": {
      "op": ">=",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%6#0",
        "tmp%9#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "m#0",
        "yesWins#0"
      ]
    },
    "1010": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "m#0",
        "yesWins#0",
        "yesWins#0 (copy)"
      ]
    },
    "1011": {
      "op": "uncover 2",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%6#0",
        "tmp%9#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "yesWins#0",
        "m#0"
      ]
    },
    "1013": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "yesWins#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "1014": {
      "error": "Index access is out of bounds",
      "op": "extract 101 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%9#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "yesWins#0",
        "m#0",
        "tmp%15#0"
      ]
    },
    "1017": {
      "op": "cover 2",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%9#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "yesWins#0",
        "m#0"
      ]
    },
    "1019": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "yesWins#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "1020": {
      "op": "pushint 101 // 101",
      "defined_out": [
        "101",
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%9#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "yesWins#0",
        "m#0",
        "m#0 (copy)",
        "101"
      ]
    },
    "1022": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "yesWins#0",
        "m#0",
        "totalYes#0"
      ]
    },
    "1023": {
      "op": "cover 2",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "yesWins#0",
        "m#0"
      ]
    },
    "1025": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "yesWins#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "1026": {
      "error": "Index access is out of bounds",
      "op": "extract 109 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "yesWins#0",
        "m#0",
        "tmp%16#0"
      ]
    },
    "1029": {
      "op": "cover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "yesWins#0",
        "m#0"
      ]
    },
    "1031": {
      "op": "pushint 109 // 109",
      "defined_out": [
        "109",
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "yesWins#0",
        "m#0",
        "109"
      ]
    },
    "1033": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalNo#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "yesWins#0",
        "totalNo#0"
      ]
    },
    "1034": {
      "op": "swap",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalNo#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "yesWins#0"
      ]
    },
    "1035": {
      "op": "bz settleBet_or_contd@2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1038": {
      "op": "frame_dig 3",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0"
      ]
    },
    "1040": {
      "op": "intc 4 // 320",
      "defined_out": [
        "320",
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalNo#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "320"
      ]
    },
    "1042": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "is_true%2#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalNo#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "is_true%2#0"
      ]
    },
    "1043": {
      "op": "bytec_0 // 0x00",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "is_true%2#0",
        "0x00"
      ]
    },
    "1044": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "is_true%2#0",
        "0x00",
        "0"
      ]
    },
    "1045": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "0x00",
        "0",
        "is_true%2#0"
      ]
    },
    "1047": {
      "op": "setbit",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_bool%2#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalNo#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_bool%2#0"
      ]
    },
    "1048": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_bool%2#0",
        "0"
      ]
    },
    "1049": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%6#0",
        "tmp%9#0",
        "totalNo#0",
        "totalYes#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%17#0"
      ]
    },
    "1050": {
      "op": "bnz settleBet_if_body@4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1053": {
      "block": "settleBet_or_contd@2",
      "stack_in": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ],
      "op": "frame_dig 10",
      "defined_out": [
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "yesWins#0"
      ]
    },
    "1055": {
      "op": "bnz settleBet_after_if_else@13",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1058": {
      "op": "frame_dig 3",
      "defined_out": [
        "b#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0"
      ]
    },
    "1060": {
      "op": "intc 4 // 320",
      "defined_out": [
        "320",
        "b#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "320"
      ]
    },
    "1062": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "is_true%3#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "is_true%3#0"
      ]
    },
    "1063": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "b#0",
        "is_true%3#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "is_true%3#0",
        "0x00"
      ]
    },
    "1064": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "b#0",
        "is_true%3#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "is_true%3#0",
        "0x00",
        "0"
      ]
    },
    "1065": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "0x00",
        "0",
        "is_true%3#0"
      ]
    },
    "1067": {
      "op": "setbit",
      "defined_out": [
        "b#0",
        "encoded_bool%3#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_bool%3#0"
      ]
    },
    "1068": {
      "op": "intc_0 // 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_bool%3#0",
        "0"
      ]
    },
    "1069": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "tmp%18#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%18#0"
      ]
    },
    "1070": {
      "op": "bnz settleBet_after_if_else@13",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1073": {
      "block": "settleBet_if_body@4",
      "stack_in": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ],
      "op": "frame_dig 14",
      "defined_out": [
        "totalNo#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0"
      ]
    },
    "1075": {
      "op": "dup",
      "defined_out": [
        "totalNo#0",
        "totalNo#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "totalNo#0 (copy)"
      ]
    },
    "1076": {
      "op": "frame_dig 12",
      "defined_out": [
        "totalNo#0",
        "totalNo#0 (copy)",
        "totalYes#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "totalNo#0 (copy)",
        "totalYes#0"
      ]
    },
    "1078": {
      "op": "dup",
      "defined_out": [
        "totalNo#0",
        "totalNo#0 (copy)",
        "totalYes#0",
        "totalYes#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "totalNo#0 (copy)",
        "totalYes#0 (copy)",
        "totalYes#0 (copy)"
      ]
    },
    "1079": {
      "op": "cover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "totalYes#0",
        "totalNo#0 (copy)",
        "totalYes#0 (copy)"
      ]
    },
    "1081": {
      "op": "frame_dig 10",
      "defined_out": [
        "totalNo#0",
        "totalNo#0 (copy)",
        "totalYes#0",
        "totalYes#0 (copy)",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "totalYes#0",
        "totalNo#0 (copy)",
        "totalYes#0 (copy)",
        "yesWins#0"
      ]
    },
    "1083": {
      "op": "dup",
      "defined_out": [
        "totalNo#0",
        "totalNo#0 (copy)",
        "totalYes#0",
        "totalYes#0 (copy)",
        "yesWins#0",
        "yesWins#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "totalYes#0",
        "totalNo#0 (copy)",
        "totalYes#0 (copy)",
        "yesWins#0 (copy)",
        "yesWins#0 (copy)"
      ]
    },
    "1084": {
      "op": "cover 4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "yesWins#0",
        "totalYes#0",
        "totalNo#0 (copy)",
        "totalYes#0 (copy)",
        "yesWins#0 (copy)"
      ]
    },
    "1086": {
      "op": "select",
      "defined_out": [
        "totalNo#0",
        "totalYes#0",
        "winnersPool#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "yesWins#0",
        "totalYes#0",
        "winnersPool#0"
      ]
    },
    "1087": {
      "op": "dup",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "totalNo#0",
        "yesWins#0",
        "totalYes#0",
        "winnersPool#0",
        "winnersPool#0 (copy)"
      ]
    },
    "1088": {
      "op": "cover 4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "winnersPool#0",
        "totalNo#0",
        "yesWins#0",
        "totalYes#0",
        "winnersPool#0"
      ]
    },
    "1090": {
      "op": "frame_bury 1",
      "defined_out": [
        "totalNo#0",
        "totalYes#0",
        "winnersPool#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "winnersPool#0",
        "totalNo#0",
        "yesWins#0",
        "totalYes#0"
      ]
    },
    "1092": {
      "op": "cover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "winnersPool#0",
        "totalYes#0",
        "totalNo#0",
        "yesWins#0"
      ]
    },
    "1094": {
      "op": "select",
      "defined_out": [
        "losersPool#0",
        "totalNo#0",
        "totalYes#0",
        "winnersPool#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "winnersPool#0",
        "losersPool#0"
      ]
    },
    "1095": {
      "op": "frame_bury 0",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "winnersPool#0"
      ]
    },
    "1097": {
      "op": "bnz settleBet_else_body@6",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1100": {
      "op": "frame_dig 3",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "totalNo#0",
        "totalYes#0",
        "winnersPool#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0"
      ]
    },
    "1102": {
      "op": "pushint 41 // 41",
      "defined_out": [
        "41",
        "b#0",
        "losersPool#0",
        "totalNo#0",
        "totalYes#0",
        "winnersPool#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "41"
      ]
    },
    "1104": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "payout#1",
        "totalNo#0",
        "totalYes#0",
        "winnersPool#0",
        "yesWins#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1"
      ]
    },
    "1105": {
      "block": "settleBet_after_if_else@10",
      "stack_in": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1"
      ],
      "op": "itxn_begin"
    },
    "1106": {
      "op": "frame_dig 3",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "b#0"
      ]
    },
    "1108": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "reinterpret_bytes[32]%0#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "1111": {
      "op": "itxn_field Receiver",
      "defined_out": [
        "b#0",
        "payout#1"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1"
      ]
    },
    "1113": {
      "op": "itxn_field Amount",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1115": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "b#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "1"
      ]
    },
    "1116": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1118": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "0"
      ]
    },
    "1119": {
      "op": "itxn_field Fee",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1121": {
      "op": "itxn_submit"
    },
    "1122": {
      "block": "settleBet_after_if_else@13",
      "stack_in": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0"
      ]
    },
    "1124": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "b#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "b#0 (copy)"
      ]
    },
    "1125": {
      "error": "Index access is out of bounds",
      "op": "extract 8 32 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0"
      ]
    },
    "1128": {
      "op": "dig 1",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0",
        "b#0 (copy)"
      ]
    },
    "1130": {
      "op": "intc 4 // 320",
      "defined_out": [
        "320",
        "b#0",
        "b#0 (copy)",
        "tmp%49#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0",
        "b#0 (copy)",
        "320"
      ]
    },
    "1132": {
      "op": "getbit",
      "defined_out": [
        "b#0",
        "is_true%5#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0",
        "is_true%5#0"
      ]
    },
    "1133": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "b#0",
        "is_true%5#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0",
        "is_true%5#0",
        "0x00"
      ]
    },
    "1134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "b#0",
        "is_true%5#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0",
        "is_true%5#0",
        "0x00",
        "0"
      ]
    },
    "1135": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0",
        "0x00",
        "0",
        "is_true%5#0"
      ]
    },
    "1137": {
      "op": "setbit",
      "defined_out": [
        "b#0",
        "encoded_bool%5#0",
        "tmp%49#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "tmp%49#0",
        "encoded_bool%5#0"
      ]
    },
    "1138": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%49#0",
        "encoded_bool%5#0",
        "b#0"
      ]
    },
    "1140": {
      "error": "Index access is out of bounds",
      "op": "extract 41 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "encoded_bool%5#0",
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%49#0",
        "encoded_bool%5#0",
        "tmp%50#0"
      ]
    },
    "1143": {
      "op": "frame_dig 4",
      "defined_out": [
        "b#0",
        "encoded_bool%5#0",
        "tmp%49#0",
        "tmp%50#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%49#0",
        "encoded_bool%5#0",
        "tmp%50#0",
        "tmp%6#0"
      ]
    },
    "1145": {
      "op": "uncover 3",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_bool%5#0",
        "tmp%50#0",
        "tmp%6#0",
        "tmp%49#0"
      ]
    },
    "1147": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%5#0",
        "encoded_tuple_buffer%17#0",
        "tmp%50#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_bool%5#0",
        "tmp%50#0",
        "encoded_tuple_buffer%17#0"
      ]
    },
    "1148": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%50#0",
        "encoded_tuple_buffer%17#0",
        "encoded_bool%5#0"
      ]
    },
    "1150": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_tuple_buffer%18#0",
        "tmp%50#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%50#0",
        "encoded_tuple_buffer%18#0"
      ]
    },
    "1151": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_tuple_buffer%18#0",
        "tmp%50#0"
      ]
    },
    "1152": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_tuple_buffer%19#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_tuple_buffer%19#0"
      ]
    },
    "1153": {
      "op": "pushbytes 0x80",
      "defined_out": [
        "0x80",
        "b#0",
        "encoded_tuple_buffer%19#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "encoded_tuple_buffer%19#0",
        "0x80"
      ]
    },
    "1156": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "tmp%6#0",
        "updatedB#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "updatedB#0"
      ]
    },
    "1157": {
      "op": "frame_dig 2",
      "defined_out": [
        "b#0",
        "tmp%1#0",
        "tmp%6#0",
        "updatedB#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "updatedB#0",
        "tmp%1#0"
      ]
    },
    "1159": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%1#0",
        "updatedB#0"
      ]
    },
    "1160": {
      "op": "box_put",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1161": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "b#0",
        "tmp%1#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "1"
      ]
    },
    "1162": {
      "op": "frame_bury 0"
    },
    "1164": {
      "retsub": true,
      "op": "retsub"
    },
    "1165": {
      "block": "settleBet_else_body@6",
      "stack_in": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "losersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "losersPool#0"
      ]
    },
    "1167": {
      "op": "bnz settleBet_else_body@8",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ]
    },
    "1170": {
      "op": "frame_dig 3",
      "defined_out": [
        "b#0",
        "losersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0"
      ]
    },
    "1172": {
      "op": "pushint 41 // 41",
      "defined_out": [
        "41",
        "b#0",
        "losersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "41"
      ]
    },
    "1174": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "payout#1"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1"
      ]
    },
    "1175": {
      "op": "b settleBet_after_if_else@10"
    },
    "1178": {
      "block": "settleBet_else_body@8",
      "stack_in": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0"
      ],
      "op": "frame_dig 3",
      "defined_out": [
        "b#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0"
      ]
    },
    "1180": {
      "op": "pushint 41 // 41",
      "defined_out": [
        "41",
        "b#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "b#0",
        "41"
      ]
    },
    "1182": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0"
      ]
    },
    "1183": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ]
    },
    "1184": {
      "op": "frame_dig 0",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "tmp%24#0",
        "tmp%24#0 (copy)"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "tmp%24#0 (copy)",
        "losersPool#0"
      ]
    },
    "1186": {
      "op": "*",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "1187": {
      "op": "frame_dig 1",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "tmp%24#0",
        "tmp%25#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "tmp%25#0",
        "winnersPool#0"
      ]
    },
    "1189": {
      "op": "/",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "profit#0",
        "tmp%24#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0"
      ]
    },
    "1190": {
      "op": "frame_dig 6",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "profit#0",
        "tmp%24#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0"
      ]
    },
    "1192": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "m#0 (copy)",
        "profit#0",
        "tmp%24#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "m#0 (copy)"
      ]
    },
    "1193": {
      "error": "Index access is out of bounds",
      "op": "extract 93 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "profit#0",
        "tmp%24#0",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0"
      ]
    },
    "1196": {
      "op": "dig 1",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0",
        "m#0 (copy)"
      ]
    },
    "1198": {
      "op": "pushint 93 // 93",
      "defined_out": [
        "93",
        "b#0",
        "losersPool#0",
        "m#0",
        "m#0 (copy)",
        "profit#0",
        "tmp%24#0",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0",
        "m#0 (copy)",
        "93"
      ]
    },
    "1200": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "profit#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "1201": {
      "op": "dig 3",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "profit#0",
        "profit#0 (copy)",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0",
        "tmp%27#0",
        "profit#0 (copy)"
      ]
    },
    "1203": {
      "op": "*",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "profit#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "1204": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "b#0",
        "losersPool#0",
        "m#0",
        "profit#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0",
        "tmp%28#0",
        "10000"
      ]
    },
    "1207": {
      "op": "/",
      "defined_out": [
        "b#0",
        "fee#0",
        "losersPool#0",
        "m#0",
        "profit#0",
        "tmp%24#0",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "profit#0",
        "m#0",
        "tmp%26#0",
        "fee#0"
      ]
    },
    "1208": {
      "op": "uncover 3",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "profit#0"
      ]
    },
    "1210": {
      "op": "dig 1",
      "defined_out": [
        "b#0",
        "fee#0",
        "fee#0 (copy)",
        "losersPool#0",
        "m#0",
        "profit#0",
        "tmp%24#0",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "profit#0",
        "fee#0 (copy)"
      ]
    },
    "1212": {
      "op": "-",
      "defined_out": [
        "b#0",
        "fee#0",
        "losersPool#0",
        "m#0",
        "tmp%24#0",
        "tmp%26#0",
        "tmp%31#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "tmp%24#0",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "tmp%31#0"
      ]
    },
    "1213": {
      "op": "uncover 4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "tmp%31#0",
        "tmp%24#0"
      ]
    },
    "1215": {
      "op": "+",
      "defined_out": [
        "b#0",
        "fee#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "payout#1"
      ]
    },
    "1216": {
      "op": "cover 3",
      "defined_out": [
        "b#0",
        "fee#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "fee#0"
      ]
    },
    "1218": {
      "op": "dig 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "m#0 (copy)"
      ]
    },
    "1220": {
      "op": "pushint 117 // 117",
      "defined_out": [
        "117",
        "b#0",
        "fee#0",
        "losersPool#0",
        "m#0",
        "m#0 (copy)",
        "payout#1",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "m#0 (copy)",
        "117"
      ]
    },
    "1222": {
      "op": "extract_uint64",
      "defined_out": [
        "b#0",
        "fee#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%33#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "fee#0",
        "tmp%33#0"
      ]
    },
    "1223": {
      "op": "+",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "newCollected#0",
        "payout#1",
        "tmp%26#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "newCollected#0"
      ]
    },
    "1224": {
      "op": "itob",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0"
      ]
    },
    "1225": {
      "op": "dig 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "m#0 (copy)"
      ]
    },
    "1227": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "b#0",
        "losersPool#0",
        "m#0",
        "m#0 (copy)",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "m#0 (copy)",
        "0"
      ]
    },
    "1228": {
      "op": "extract_uint16",
      "defined_out": [
        "b#0",
        "item_start_offset%0#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0"
      ]
    },
    "1229": {
      "op": "dig 3",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "1231": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "b#0",
        "item_start_offset%0#0",
        "losersPool#0",
        "m#0",
        "m#0 (copy)",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "m#0 (copy)",
        "2"
      ]
    },
    "1233": {
      "op": "extract_uint16",
      "defined_out": [
        "b#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1234": {
      "op": "dig 4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "1236": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "1238": {
      "op": "dig 2",
      "defined_out": [
        "b#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "losersPool#0",
        "m#0",
        "m#0 (copy)",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "1240": {
      "op": "substring3",
      "defined_out": [
        "b#0",
        "item_end_offset%0#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%34#0"
      ]
    },
    "1241": {
      "op": "dig 4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%34#0",
        "m#0 (copy)"
      ]
    },
    "1243": {
      "op": "len",
      "defined_out": [
        "b#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%34#0",
        "item_end_offset%1#0"
      ]
    },
    "1244": {
      "op": "dig 5",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "item_end_offset%0#0",
        "tmp%34#0",
        "item_end_offset%1#0",
        "m#0 (copy)"
      ]
    },
    "1246": {
      "op": "uncover 3",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "item_end_offset%1#0",
        "m#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "1248": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "m#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "1250": {
      "op": "substring3",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "1251": {
      "op": "dig 4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "m#0 (copy)"
      ]
    },
    "1253": {
      "error": "Index access is out of bounds",
      "op": "extract 12 8 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0"
      ]
    },
    "1256": {
      "op": "dig 5",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "m#0 (copy)"
      ]
    },
    "1258": {
      "error": "Index access is out of bounds",
      "op": "extract 29 32 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "m#0",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0"
      ]
    },
    "1261": {
      "op": "uncover 6",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "m#0"
      ]
    },
    "1263": {
      "error": "Index access is out of bounds",
      "op": "extract 61 32 // on error: Index access is out of bounds",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "1266": {
      "op": "dig 4",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%34#0 (copy)",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%34#0 (copy)"
      ]
    },
    "1268": {
      "op": "len",
      "defined_out": [
        "b#0",
        "data_length%0#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "data_length%0#0"
      ]
    },
    "1269": {
      "op": "intc_2 // 125",
      "defined_out": [
        "125",
        "b#0",
        "data_length%0#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "data_length%0#0",
        "125"
      ]
    },
    "1270": {
      "op": "+",
      "defined_out": [
        "b#0",
        "current_tail_offset%1#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "current_tail_offset%1#0"
      ]
    },
    "1271": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "b#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "as_bytes%1#0"
      ]
    },
    "1272": {
      "op": "extract 6 2",
      "defined_out": [
        "b#0",
        "losersPool#0",
        "m#0",
        "offset_as_uint16%1#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1275": {
      "op": "bytec_3 // 0x007d",
      "defined_out": [
        "0x007d",
        "b#0",
        "losersPool#0",
        "m#0",
        "offset_as_uint16%1#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "offset_as_uint16%1#0",
        "0x007d"
      ]
    },
    "1276": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "0x007d",
        "offset_as_uint16%1#0"
      ]
    },
    "1277": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_tuple_buffer%2#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1278": {
      "op": "frame_dig 9",
      "defined_out": [
        "b#0",
        "encoded_tuple_buffer%2#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%2#0",
        "tmp%13#0"
      ]
    },
    "1280": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_tuple_buffer%3#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%37#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1281": {
      "op": "uncover 3",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%3#0",
        "tmp%37#0"
      ]
    },
    "1283": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_tuple_buffer%4#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1284": {
      "op": "frame_dig 7",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%4#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%4#0",
        "encoded_bool%1#0"
      ]
    },
    "1286": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1287": {
      "op": "frame_dig 8",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%5#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%5#0",
        "tmp%11#0"
      ]
    },
    "1289": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%6#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%39#0",
        "tmp%40#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1290": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%40#0",
        "encoded_tuple_buffer%6#0",
        "tmp%39#0"
      ]
    },
    "1292": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%7#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%40#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "tmp%40#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1293": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%7#0",
        "tmp%40#0"
      ]
    },
    "1294": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%8#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%26#0",
        "tmp%34#0",
        "tmp%35#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%26#0",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1295": {
      "op": "uncover 4",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%8#0",
        "tmp%26#0"
      ]
    },
    "1297": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%34#0",
        "tmp%35#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1298": {
      "op": "frame_dig 11",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%9#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%34#0",
        "tmp%35#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%9#0",
        "tmp%15#0"
      ]
    },
    "1300": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%34#0",
        "tmp%35#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1301": {
      "op": "frame_dig 13",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%10#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%34#0",
        "tmp%35#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%10#0",
        "tmp%16#0"
      ]
    },
    "1303": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%11#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%34#0",
        "tmp%35#0",
        "val_as_bytes%0#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "val_as_bytes%0#0",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1304": {
      "op": "uncover 3",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%11#0",
        "val_as_bytes%0#0"
      ]
    },
    "1306": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%12#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%34#0",
        "tmp%35#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%34#0",
        "tmp%35#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1307": {
      "op": "uncover 2",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%35#0",
        "encoded_tuple_buffer%12#0",
        "tmp%34#0"
      ]
    },
    "1309": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "encoded_tuple_buffer%13#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%35#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%35#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "1310": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "encoded_tuple_buffer%13#0",
        "tmp%35#0"
      ]
    },
    "1311": {
      "op": "concat",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "updatedM1#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "updatedM1#0"
      ]
    },
    "1312": {
      "op": "frame_dig 5",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0",
        "updatedM1#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "updatedM1#0",
        "tmp%9#0"
      ]
    },
    "1314": {
      "op": "dup",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "updatedM1#0",
        "winnersPool#0"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "updatedM1#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1315": {
      "op": "box_del",
      "defined_out": [
        "b#0",
        "encoded_bool%1#0",
        "losersPool#0",
        "m#0",
        "payout#1",
        "tmp%11#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%9#0",
        "updatedM1#0",
        "winnersPool#0",
        "{box_del}"
      ],
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "updatedM1#0",
        "tmp%9#0",
        "{box_del}"
      ]
    },
    "1316": {
      "op": "pop",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "updatedM1#0",
        "tmp%9#0"
      ]
    },
    "1317": {
      "op": "swap",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1",
        "tmp%9#0",
        "updatedM1#0"
      ]
    },
    "1318": {
      "op": "box_put",
      "stack_out": [
        "losersPool#0",
        "winnersPool#0",
        "tmp%1#0",
        "b#0",
        "tmp%6#0",
        "tmp%9#0",
        "m#0",
        "encoded_bool%1#0",
        "tmp%11#0",
        "tmp%13#0",
        "yesWins#0",
        "tmp%15#0",
        "totalYes#0",
        "tmp%16#0",
        "totalNo#0",
        "payout#1"
      ]
    },
    "1319": {
      "op": "b settleBet_after_if_else@10"
    },
    "1322": {
      "subroutine": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.withdrawFees",
      "params": {
        "marketId#0": "uint64"
      },
      "block": "withdrawFees",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1325": {
      "op": "frame_dig -1",
      "defined_out": [
        "marketId#0 (copy)"
      ],
      "stack_out": [
        "marketId#0 (copy)"
      ]
    },
    "1327": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1328": {
      "op": "bytec_2 // \"markets\"",
      "defined_out": [
        "\"markets\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"markets\""
      ]
    },
    "1329": {
      "op": "swap",
      "stack_out": [
        "\"markets\"",
        "tmp%0#0"
      ]
    },
    "1330": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1331": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1332": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1333": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1335": {
      "error": "market not found",
      "op": "assert // market not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1336": {
      "op": "dup",
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1337": {
      "op": "box_get",
      "defined_out": [
        "m#0",
        "maybe_exists%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "maybe_exists%1#0"
      ]
    },
    "1338": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%1#0",
        "m#0"
      ]
    },
    "1339": {
      "op": "txn Sender",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0"
      ]
    },
    "1341": {
      "op": "dig 1",
      "defined_out": [
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0",
        "m#0 (copy)"
      ]
    },
    "1343": {
      "error": "Index access is out of bounds",
      "op": "extract 29 32 // on error: Index access is out of bounds",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1346": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%4#0"
      ]
    },
    "1347": {
      "op": "dig 1",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%4#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1349": {
      "op": "==",
      "defined_out": [
        "m#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1350": {
      "error": "not creator",
      "op": "assert // not creator",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0"
      ]
    },
    "1351": {
      "op": "dig 1",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "m#0 (copy)"
      ]
    },
    "1353": {
      "op": "pushint 117 // 117",
      "defined_out": [
        "117",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "m#0 (copy)",
        "117"
      ]
    },
    "1355": {
      "op": "extract_uint64",
      "defined_out": [
        "amt#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0"
      ]
    },
    "1356": {
      "op": "dup",
      "defined_out": [
        "amt#0",
        "amt#0 (copy)",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "amt#0 (copy)"
      ]
    },
    "1357": {
      "error": "nothing to withdraw",
      "op": "assert // nothing to withdraw",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0"
      ]
    },
    "1358": {
      "op": "dig 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "m#0 (copy)"
      ]
    },
    "1360": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "amt#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "m#0 (copy)",
        "0"
      ]
    },
    "1361": {
      "op": "extract_uint16",
      "defined_out": [
        "amt#0",
        "item_start_offset%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_start_offset%0#0"
      ]
    },
    "1362": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_start_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "1364": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "amt#0",
        "item_start_offset%0#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_start_offset%0#0",
        "m#0 (copy)",
        "2"
      ]
    },
    "1366": {
      "op": "extract_uint16",
      "defined_out": [
        "amt#0",
        "item_end_offset%0#0",
        "item_start_offset%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0"
      ]
    },
    "1367": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_start_offset%0#0",
        "item_end_offset%0#0",
        "m#0 (copy)"
      ]
    },
    "1369": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0"
      ]
    },
    "1371": {
      "op": "dig 2",
      "defined_out": [
        "amt#0",
        "item_end_offset%0#0",
        "item_end_offset%0#0 (copy)",
        "item_start_offset%0#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_end_offset%0#0",
        "m#0 (copy)",
        "item_start_offset%0#0",
        "item_end_offset%0#0 (copy)"
      ]
    },
    "1373": {
      "op": "substring3",
      "defined_out": [
        "amt#0",
        "item_end_offset%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_end_offset%0#0",
        "tmp%9#0"
      ]
    },
    "1374": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_end_offset%0#0",
        "tmp%9#0",
        "m#0 (copy)"
      ]
    },
    "1376": {
      "op": "len",
      "defined_out": [
        "amt#0",
        "item_end_offset%0#0",
        "item_end_offset%1#0",
        "m#0",
        "tmp%1#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_end_offset%0#0",
        "tmp%9#0",
        "item_end_offset%1#0"
      ]
    },
    "1377": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "item_end_offset%0#0",
        "tmp%9#0",
        "item_end_offset%1#0",
        "m#0 (copy)"
      ]
    },
    "1379": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "item_end_offset%1#0",
        "m#0 (copy)",
        "item_end_offset%0#0"
      ]
    },
    "1381": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "m#0 (copy)",
        "item_end_offset%0#0",
        "item_end_offset%1#0"
      ]
    },
    "1383": {
      "op": "substring3",
      "defined_out": [
        "amt#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1384": {
      "op": "dig 4",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "m#0 (copy)"
      ]
    },
    "1386": {
      "error": "Index access is out of bounds",
      "op": "extract 4 8 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "1389": {
      "op": "dig 5",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "m#0 (copy)"
      ]
    },
    "1391": {
      "error": "Index access is out of bounds",
      "op": "extract 12 8 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1394": {
      "op": "dig 6",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "m#0 (copy)"
      ]
    },
    "1396": {
      "op": "intc_3 // 160",
      "defined_out": [
        "160",
        "amt#0",
        "m#0",
        "m#0 (copy)",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "m#0 (copy)",
        "160"
      ]
    },
    "1397": {
      "op": "getbit",
      "defined_out": [
        "amt#0",
        "is_true%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "is_true%0#0"
      ]
    },
    "1398": {
      "op": "bytec_0 // 0x00",
      "defined_out": [
        "0x00",
        "amt#0",
        "is_true%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "is_true%0#0",
        "0x00"
      ]
    },
    "1399": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "is_true%0#0",
        "0x00",
        "0"
      ]
    },
    "1400": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "0x00",
        "0",
        "is_true%0#0"
      ]
    },
    "1402": {
      "op": "setbit",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0"
      ]
    },
    "1403": {
      "op": "dig 7",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "m#0 (copy)"
      ]
    },
    "1405": {
      "error": "Index access is out of bounds",
      "op": "extract 21 8 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0"
      ]
    },
    "1408": {
      "op": "dig 8",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "m#0 (copy)"
      ]
    },
    "1410": {
      "error": "Index access is out of bounds",
      "op": "extract 61 32 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "1413": {
      "op": "dig 9",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "m#0 (copy)"
      ]
    },
    "1415": {
      "error": "Index access is out of bounds",
      "op": "extract 93 8 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "1418": {
      "op": "dig 10",
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "m#0 (copy)"
      ]
    },
    "1420": {
      "error": "Index access is out of bounds",
      "op": "extract 101 8 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "m#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "m#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1423": {
      "op": "uncover 11",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "m#0"
      ]
    },
    "1425": {
      "error": "Index access is out of bounds",
      "op": "extract 109 8 // on error: Index access is out of bounds",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "1428": {
      "op": "dig 9",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1430": {
      "op": "len",
      "defined_out": [
        "amt#0",
        "data_length%0#0",
        "encoded_bool%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "data_length%0#0"
      ]
    },
    "1431": {
      "op": "intc_2 // 125",
      "defined_out": [
        "125",
        "amt#0",
        "data_length%0#0",
        "encoded_bool%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "data_length%0#0",
        "125"
      ]
    },
    "1432": {
      "op": "+",
      "defined_out": [
        "amt#0",
        "current_tail_offset%1#0",
        "encoded_bool%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "current_tail_offset%1#0"
      ]
    },
    "1433": {
      "op": "itob",
      "defined_out": [
        "amt#0",
        "as_bytes%1#0",
        "encoded_bool%0#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "as_bytes%1#0"
      ]
    },
    "1434": {
      "op": "extract 6 2",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "offset_as_uint16%1#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "offset_as_uint16%1#0"
      ]
    },
    "1437": {
      "op": "bytec_3 // 0x007d",
      "defined_out": [
        "0x007d",
        "amt#0",
        "encoded_bool%0#0",
        "offset_as_uint16%1#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "offset_as_uint16%1#0",
        "0x007d"
      ]
    },
    "1438": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "0x007d",
        "offset_as_uint16%1#0"
      ]
    },
    "1439": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "1440": {
      "op": "uncover 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%2#0",
        "tmp%11#0"
      ]
    },
    "1442": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%3#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%12#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "1443": {
      "op": "uncover 7",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%3#0",
        "tmp%12#0"
      ]
    },
    "1445": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_bool%0#0",
        "encoded_tuple_buffer%4#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_bool%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "1446": {
      "op": "uncover 6",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%4#0",
        "encoded_bool%0#0"
      ]
    },
    "1448": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%5#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "1449": {
      "op": "uncover 5",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%5#0",
        "tmp%13#0"
      ]
    },
    "1451": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%6#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "1452": {
      "op": "dig 8",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%6#0",
        "tmp%5#0 (copy)"
      ]
    },
    "1454": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%7#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "1455": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%7#0",
        "tmp%15#0"
      ]
    },
    "1457": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%8#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "1458": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%8#0",
        "tmp%16#0"
      ]
    },
    "1460": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%9#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%17#0",
        "tmp%18#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "1461": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%18#0",
        "encoded_tuple_buffer%9#0",
        "tmp%17#0"
      ]
    },
    "1463": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%10#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%18#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%18#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "1464": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%10#0",
        "tmp%18#0"
      ]
    },
    "1465": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%11#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "1466": {
      "op": "bytec 4 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "amt#0",
        "encoded_tuple_buffer%11#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%11#0",
        "0x0000000000000000"
      ]
    },
    "1468": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%12#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%9#0",
        "tmp%10#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "1469": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%10#0",
        "encoded_tuple_buffer%12#0",
        "tmp%9#0"
      ]
    },
    "1471": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "encoded_tuple_buffer%13#0",
        "tmp%1#0",
        "tmp%10#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "tmp%10#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "1472": {
      "op": "swap",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "encoded_tuple_buffer%13#0",
        "tmp%10#0"
      ]
    },
    "1473": {
      "op": "concat",
      "defined_out": [
        "amt#0",
        "tmp%1#0",
        "tmp%5#0",
        "updated#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "updated#0"
      ]
    },
    "1474": {
      "op": "dig 3",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "updated#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1476": {
      "op": "box_del",
      "defined_out": [
        "amt#0",
        "tmp%1#0",
        "tmp%5#0",
        "updated#0",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "updated#0",
        "{box_del}"
      ]
    },
    "1477": {
      "op": "pop",
      "stack_out": [
        "tmp%1#0",
        "tmp%5#0",
        "amt#0",
        "updated#0"
      ]
    },
    "1478": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%5#0",
        "amt#0",
        "updated#0",
        "tmp%1#0"
      ]
    },
    "1480": {
      "op": "swap",
      "stack_out": [
        "tmp%5#0",
        "amt#0",
        "tmp%1#0",
        "updated#0"
      ]
    },
    "1481": {
      "op": "box_put",
      "stack_out": [
        "tmp%5#0",
        "amt#0"
      ]
    },
    "1482": {
      "op": "itxn_begin"
    },
    "1483": {
      "op": "itxn_field Amount"
    },
    "1485": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "1487": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1488": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1491": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1493": {
      "op": "itxn_submit"
    },
    "1494": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1495": {
      "retsub": true,
      "op": "retsub"
    },
    "1496": {
      "subroutine": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.getMarket",
      "params": {
        "marketId#0": "uint64"
      },
      "block": "getMarket",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1499": {
      "op": "frame_dig -1",
      "defined_out": [
        "marketId#0 (copy)"
      ],
      "stack_out": [
        "marketId#0 (copy)"
      ]
    },
    "1501": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1502": {
      "op": "bytec_2 // \"markets\"",
      "defined_out": [
        "\"markets\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"markets\""
      ]
    },
    "1503": {
      "op": "swap",
      "stack_out": [
        "\"markets\"",
        "tmp%0#0"
      ]
    },
    "1504": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1505": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1506": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1507": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1509": {
      "error": "market not found",
      "op": "assert // market not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1510": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1511": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1512": {
      "retsub": true,
      "op": "retsub"
    },
    "1513": {
      "subroutine": "smart_contracts/percival_sc/contract.algo.ts::PercivalSc.getBet",
      "params": {
        "betId#0": "uint64"
      },
      "block": "getBet",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1516": {
      "op": "frame_dig -1",
      "defined_out": [
        "betId#0 (copy)"
      ],
      "stack_out": [
        "betId#0 (copy)"
      ]
    },
    "1518": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1519": {
      "op": "bytec 5 // \"bets\"",
      "defined_out": [
        "\"bets\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "\"bets\""
      ]
    },
    "1521": {
      "op": "swap",
      "stack_out": [
        "\"bets\"",
        "tmp%0#0"
      ]
    },
    "1522": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1523": {
      "op": "dup",
      "defined_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1524": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1525": {
      "op": "bury 1",
      "stack_out": [
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "1527": {
      "error": "bet not found",
      "op": "assert // bet not found",
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1528": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1529": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1530": {
      "retsub": true,
      "op": "retsub"
    }
  }
}