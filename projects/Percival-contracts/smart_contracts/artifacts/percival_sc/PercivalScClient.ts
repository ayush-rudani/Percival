/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"PercivalSc","structs":{"BetStruct":[{"name":"marketId","type":"uint64"},{"name":"bettor","type":"address"},{"name":"sideYes","type":"bool"},{"name":"amount","type":"uint64"},{"name":"settled","type":"bool"}],"MarketStruct":[{"name":"platform","type":"string"},{"name":"contentId","type":"string"},{"name":"targetCount","type":"uint64"},{"name":"deadline","type":"uint64"},{"name":"resolved","type":"bool"},{"name":"finalCount","type":"uint64"},{"name":"creator","type":"address"},{"name":"oracle","type":"address"},{"name":"feeBps","type":"uint64"},{"name":"totalYesStake","type":"uint64"},{"name":"totalNoStake","type":"uint64"},{"name":"collectedFees","type":"uint64"}]},"methods":[{"name":"createMarket","args":[{"type":"string","name":"platform","desc":"Social platform label (e.g., \"instagram\")"},{"type":"string","name":"contentId","desc":"Content reference (URL or platform-specific ID)"},{"type":"uint64","name":"targetCount","desc":"Target count to compare against at resolution"},{"type":"uint64","name":"deadline","desc":"Unix timestamp after which no more bets are allowed"},{"type":"account","name":"oracle","desc":"Address allowed to resolve with the final observed count"},{"type":"uint64","name":"feeBps","desc":"Fee in basis points (e.g., 100 = 1%) taken from winners' profits"}],"returns":{"type":"uint64","desc":"marketId"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new prediction market.","events":[],"recommendations":{}},{"name":"placeBet","args":[{"type":"uint64","name":"marketId","desc":"The market to bet on"},{"type":"bool","name":"sideYes","desc":"true for YES (finalCount >= targetCount), false for NO"},{"type":"uint64","name":"amount","desc":"Amount to stake (microAlgos); must match grouped payment"},{"type":"pay","name":"payment","desc":"Grouped payment txn with receiver = app address, sender = caller"}],"returns":{"type":"uint64","desc":"betId"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Place a YES/NO bet by grouping a payment transaction to the app address.","events":[],"recommendations":{}},{"name":"resolveMarket","args":[{"type":"uint64","name":"marketId"},{"type":"uint64","name":"finalCount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Resolve a market by providing the final observed count.\nCan be called by the configured oracle after the deadline.","events":[],"recommendations":{}},{"name":"settleBet","args":[{"type":"uint64","name":"betId"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Settle an individual bet after resolution and pay out if it won.\nAnyone can trigger, but funds go to the original bettor.\nFee is taken from the profit (not from original stake) and accumulated for the creator.","events":[],"recommendations":{}},{"name":"withdrawFees","args":[{"type":"uint64","name":"marketId"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw accumulated fees for a market. Only the market creator.","events":[],"recommendations":{}},{"name":"getMarket","args":[{"type":"uint64","name":"marketId"}],"returns":{"type":"(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)","struct":"MarketStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Read-only: get market details","events":[],"recommendations":{}},{"name":"getBet","args":[{"type":"uint64","name":"betId"}],"returns":{"type":"(uint64,address,bool,uint64,bool)","struct":"BetStruct"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Read-only: get bet details","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"nextMarketId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dE1hcmtldElk"},"nextBetId":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dEJldElk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"markets":{"keyType":"uint64","valueType":"MarketStruct","prefix":"bWFya2V0cw=="},"bets":{"keyType":"uint64","valueType":"BetStruct","prefix":"YmV0cw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[488,762,941,973,1338,1511,1529],"errorMessage":"Box must have value"},{"pc":[508,650,655,660,665,670,675,767,796,835,840,845,850,855,860,957,989,999,1014,1026,1108,1125,1140,1193,1253,1258,1263,1343,1386,1391,1405,1410,1415,1420,1425],"errorMessage":"Index access is out of bounds"},{"pc":[133,153,173,198,223,252,292],"errorMessage":"OnCompletion is not NoOp"},{"pc":[791],"errorMessage":"already resolved"},{"pc":[955],"errorMessage":"already settled"},{"pc":[522],"errorMessage":"amount=0"},{"pc":[530],"errorMessage":"bad amount"},{"pc":[538],"errorMessage":"bad receiver"},{"pc":[546],"errorMessage":"bad sender"},{"pc":[935,1527],"errorMessage":"bet not found"},{"pc":[519],"errorMessage":"betting closed"},{"pc":[344],"errorMessage":"can only call when creating"},{"pc":[136,156,176,201,226,255,295],"errorMessage":"can only call when not creating"},{"pc":[367,557],"errorMessage":"check GlobalState exists"},{"pc":[362],"errorMessage":"deadline in past"},{"pc":[356],"errorMessage":"fee too high"},{"pc":[480,759,1335,1509],"errorMessage":"market not found"},{"pc":[503],"errorMessage":"market resolved"},{"pc":[1350],"errorMessage":"not creator"},{"pc":[803],"errorMessage":"not oracle"},{"pc":[987],"errorMessage":"not resolved"},{"pc":[1357],"errorMessage":"nothing to withdraw"},{"pc":[778],"errorMessage":"too early"},{"pc":[278],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAFAAF9oAHAAiYIAQAEFR98dQdtYXJrZXRzAgB9CAAAAAAAAAAABGJldHMMbmV4dE1hcmtldElkCW5leHRCZXRJZDEbQQEIggcEZLVWCgScOJFnBH504lgExuA2BQRwjmylBJx5GkoENkEslzYaAI4HAKEAeQBcAEMAKgAWAAIiQzEZFEQxGEQ2GgEXiAVZKUxQsCNDMRkURDEYRDYaAReIBTQpTFCwI0MxGRREMRhENhoBF4gEcigiTwJUKUxQsCNDMRkURDEYRDYaAReIAsQoIk8CVClMULAjQzEZFEQxGEQ2GgEXNhoCF4gB/CgiTwJUKUxQsCNDMRkURDEYRDYaARc2GgIiUzYaAxcxFiMJSTgQIxJEiAC1FilMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXNhoEFzYaBRfAHDYaBheIABIWKUxQsCNDMRlA/ysxGBREI0OKBgGL/4HoBw5Ei/0yBw1EIicGZUSL+hUWVwYCi/pQi/sVFlcGAov7UIv8Fov9FjEAi/8WSwUVJAgWVwYCK0xQTwRQTwNQKFAnBFBPAlCL/lBMUCcEUCcEUCcEUE8CUExQSwEWKkxQSbxITL9JIwgnBkxniYoEAYv8FipLAVBJTgJJvUUBRL5MSU4CTgNESSVTKCJPAlRJTgMiUxREMgdLAVcMCE4DSwGBDFsORIv+RIv/OAiL/hJEi/84BzIKEkSL/zgAMQASRCInB2VMSU4CTgREMQAoIov9VIv+Fk8FTwNQTwJQTFAoUEsBFicFTFBMvyMIJwdMZ0mBZVtMgW1bi/1BAICLBYv+CIwFiwUWiwYWiwFJIllLAYECWUsCTwJLAlJLAhVLA08DTwJSSwJXBAhLA1cVCEsEVx0gSwVXPSBLBlddCE8HV3UISwcVJAgWVwYCK0xQTwZQiwNQiwJQTwVQTwRQTwNQTwJQTwVQTwRQTFBPAlBMUIsASbxITL+LBIwAiYsGi/4IjAZC/32KAgGL/hYqTFBJvUUBREm+RDIHSwFXDAhLAoEMW08CDkRLASVTKCJPAlQiUxREMQBLAlc9IExLARJEi/8WSwMiWUsEgQJZSwVPAksCUksFFUsGTwNPAlJLBVcECEsGVx0gSwdXXQhLCFdlCEsJV20ITwpXdQhLBxUkCBZXBgIrTFBPBlBPClCAAYBQTwhQTwVQTwdQTwRQTwNQTwJQTFBPAlBMUEsBvEi/I4mKAQGAAEmL/xYnBUxQRwK9RQFEvkxJTwJESYGIA1MoIk8CVCJTFERJVwAITCJbFipMUEm+TElPAkRJJVMoIk8CVElOAiJTRElXFQhMSYEVW0sBVwQITgJLAYEEWw9JTwJJV2UITgJJgWVbTgJJV20ITgKBbVtMQQAPiwMhBFMoIk8CVCJTQAAUiwpAAECLAyEEUygiTwJUIlNAADGLDkmLDElOAosKSU4ETUlOBIwBTgJNjABAAEGLA4EpW7GLA1cIILIHsggjshAisgGziwNJVwggSwEhBFMoIk8CVE8CVykIiwRPA1BPAlBMUIABgFCLAky/I4wAiYsAQAAIiwOBKVtC/7eLA4EpW0mLAAuLAQqLBklXXQhLAYFdW0sDC4GQTgpPA0sBCU8ECE4DSwKBdVsIFksCIllLA4ECWUsETwJLAlJLBBVLBU8DTwJSSwRXDAhLBVcdIE8GVz0gSwQVJAgWVwYCK0xQiwlQTwNQiwdQiwhQTwJQTFBPBFCLC1CLDVBPA1BPAlBMUIsFSbxITL9C/yeKAQGL/xYqTFBJvUUBREm+RDEASwFXHSBMSwESREsBgXVbSURLAiJZSwOBAllLBE8CSwJSSwQVSwVPA08CUksEVwQISwVXDAhLBiVTKCJPAlRLB1cVCEsIVz0gSwlXXQhLCldlCE8LV20ISwkVJAgWVwYCK0xQTwhQTwdQTwZQTwVQSwhQTwRQTwNQTwJQTFAnBFBPAlBMUEsDvEhPA0y/sbIIsgcjshAisgGzI4mKAQGL/xYqTFBJvUUBRL5EiYoBAYv/FicFTFBJvUUBRL5EiQ==","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type BetStruct = {
  marketId: bigint,
  bettor: string,
  sideYes: boolean,
  amount: bigint,
  settled: boolean
}


/**
 * Converts the ABI tuple representation of a BetStruct to the struct representation
 */
export function BetStructFromTuple(abiTuple: [bigint, string, boolean, bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.BetStruct, APP_SPEC.structs) as BetStruct
}

export type MarketStruct = {
  platform: string,
  contentId: string,
  targetCount: bigint,
  deadline: bigint,
  resolved: boolean,
  finalCount: bigint,
  creator: string,
  oracle: string,
  feeBps: bigint,
  totalYesStake: bigint,
  totalNoStake: bigint,
  collectedFees: bigint
}


/**
 * Converts the ABI tuple representation of a MarketStruct to the struct representation
 */
export function MarketStructFromTuple(abiTuple: [string, string, bigint, bigint, boolean, bigint, string, string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MarketStruct, APP_SPEC.structs) as MarketStruct
}

/**
 * The argument types for the PercivalSc contract
 */
export type PercivalScArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createMarket(string,string,uint64,uint64,account,uint64)uint64': {
      /**
       * Social platform label (e.g., "instagram")
       */
      platform: string
      /**
       * Content reference (URL or platform-specific ID)
       */
      contentId: string
      /**
       * Target count to compare against at resolution
       */
      targetCount: bigint | number
      /**
       * Unix timestamp after which no more bets are allowed
       */
      deadline: bigint | number
      /**
       * Address allowed to resolve with the final observed count
       */
      oracle: Uint8Array | string
      /**
       * Fee in basis points (e.g., 100 = 1%) taken from winners' profits
       */
      feeBps: bigint | number
    }
    'placeBet(uint64,bool,uint64,pay)uint64': {
      /**
       * The market to bet on
       */
      marketId: bigint | number
      /**
       * true for YES (finalCount >= targetCount), false for NO
       */
      sideYes: boolean
      /**
       * Amount to stake (microAlgos); must match grouped payment
       */
      amount: bigint | number
      /**
       * Grouped payment txn with receiver = app address, sender = caller
       */
      payment: AppMethodCallTransactionArgument
    }
    'resolveMarket(uint64,uint64)bool': {
      marketId: bigint | number
      finalCount: bigint | number
    }
    'settleBet(uint64)bool': {
      betId: bigint | number
    }
    'withdrawFees(uint64)bool': {
      marketId: bigint | number
    }
    'getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)': {
      marketId: bigint | number
    }
    'getBet(uint64)(uint64,address,bool,uint64,bool)': {
      betId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createMarket(string,string,uint64,uint64,account,uint64)uint64': [platform: string, contentId: string, targetCount: bigint | number, deadline: bigint | number, oracle: Uint8Array | string, feeBps: bigint | number]
    'placeBet(uint64,bool,uint64,pay)uint64': [marketId: bigint | number, sideYes: boolean, amount: bigint | number, payment: AppMethodCallTransactionArgument]
    'resolveMarket(uint64,uint64)bool': [marketId: bigint | number, finalCount: bigint | number]
    'settleBet(uint64)bool': [betId: bigint | number]
    'withdrawFees(uint64)bool': [marketId: bigint | number]
    'getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)': [marketId: bigint | number]
    'getBet(uint64)(uint64,address,bool,uint64,bool)': [betId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type PercivalScReturns = {
  'createMarket(string,string,uint64,uint64,account,uint64)uint64': bigint
  'placeBet(uint64,bool,uint64,pay)uint64': bigint
  'resolveMarket(uint64,uint64)bool': boolean
  'settleBet(uint64)bool': boolean
  'withdrawFees(uint64)bool': boolean
  'getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)': MarketStruct
  'getBet(uint64)(uint64,address,bool,uint64,bool)': BetStruct
}

/**
 * Defines the types of available calls and state of the PercivalSc smart contract.
 */
export type PercivalScTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createMarket(string,string,uint64,uint64,account,uint64)uint64' | 'createMarket', {
      argsObj: PercivalScArgs['obj']['createMarket(string,string,uint64,uint64,account,uint64)uint64']
      argsTuple: PercivalScArgs['tuple']['createMarket(string,string,uint64,uint64,account,uint64)uint64']
      /**
       * marketId
       */
      returns: PercivalScReturns['createMarket(string,string,uint64,uint64,account,uint64)uint64']
    }>
    & Record<'placeBet(uint64,bool,uint64,pay)uint64' | 'placeBet', {
      argsObj: PercivalScArgs['obj']['placeBet(uint64,bool,uint64,pay)uint64']
      argsTuple: PercivalScArgs['tuple']['placeBet(uint64,bool,uint64,pay)uint64']
      /**
       * betId
       */
      returns: PercivalScReturns['placeBet(uint64,bool,uint64,pay)uint64']
    }>
    & Record<'resolveMarket(uint64,uint64)bool' | 'resolveMarket', {
      argsObj: PercivalScArgs['obj']['resolveMarket(uint64,uint64)bool']
      argsTuple: PercivalScArgs['tuple']['resolveMarket(uint64,uint64)bool']
      returns: PercivalScReturns['resolveMarket(uint64,uint64)bool']
    }>
    & Record<'settleBet(uint64)bool' | 'settleBet', {
      argsObj: PercivalScArgs['obj']['settleBet(uint64)bool']
      argsTuple: PercivalScArgs['tuple']['settleBet(uint64)bool']
      returns: PercivalScReturns['settleBet(uint64)bool']
    }>
    & Record<'withdrawFees(uint64)bool' | 'withdrawFees', {
      argsObj: PercivalScArgs['obj']['withdrawFees(uint64)bool']
      argsTuple: PercivalScArgs['tuple']['withdrawFees(uint64)bool']
      returns: PercivalScReturns['withdrawFees(uint64)bool']
    }>
    & Record<'getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)' | 'getMarket', {
      argsObj: PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']
      argsTuple: PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']
      returns: PercivalScReturns['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']
    }>
    & Record<'getBet(uint64)(uint64,address,bool,uint64,bool)' | 'getBet', {
      argsObj: PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)']
      argsTuple: PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']
      returns: PercivalScReturns['getBet(uint64)(uint64,address,bool,uint64,bool)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextMarketId: bigint
        nextBetId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        markets: Map<bigint | number, MarketStruct>
        bets: Map<bigint | number, BetStruct>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type PercivalScSignatures = keyof PercivalScTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type PercivalScNonVoidMethodSignatures = keyof PercivalScTypes['methods'] extends infer T ? T extends keyof PercivalScTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the PercivalSc smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends PercivalScSignatures> = PercivalScTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PercivalSc smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PercivalScSignatures> = PercivalScTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = PercivalScTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = PercivalScTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type PercivalScCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type PercivalScDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: PercivalScCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the PercivalSc smart contract
 */
export abstract class PercivalScParamsFactory {
  /**
   * Constructs a no op call for the createMarket(string,string,uint64,uint64,account,uint64)uint64 ABI method
   *
   * Create a new prediction market.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createMarket(params: CallParams<PercivalScArgs['obj']['createMarket(string,string,uint64,uint64,account,uint64)uint64'] | PercivalScArgs['tuple']['createMarket(string,string,uint64,uint64,account,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createMarket(string,string,uint64,uint64,account,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.platform, params.args.contentId, params.args.targetCount, params.args.deadline, params.args.oracle, params.args.feeBps],
    }
  }
  /**
   * Constructs a no op call for the placeBet(uint64,bool,uint64,pay)uint64 ABI method
   *
   * Place a YES/NO bet by grouping a payment transaction to the app address.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static placeBet(params: CallParams<PercivalScArgs['obj']['placeBet(uint64,bool,uint64,pay)uint64'] | PercivalScArgs['tuple']['placeBet(uint64,bool,uint64,pay)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'placeBet(uint64,bool,uint64,pay)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.marketId, params.args.sideYes, params.args.amount, params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the resolveMarket(uint64,uint64)bool ABI method
   *
  * Resolve a market by providing the final observed count.
  Can be called by the configured oracle after the deadline.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resolveMarket(params: CallParams<PercivalScArgs['obj']['resolveMarket(uint64,uint64)bool'] | PercivalScArgs['tuple']['resolveMarket(uint64,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resolveMarket(uint64,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.marketId, params.args.finalCount],
    }
  }
  /**
   * Constructs a no op call for the settleBet(uint64)bool ABI method
   *
  * Settle an individual bet after resolution and pay out if it won.
  Anyone can trigger, but funds go to the original bettor.
  Fee is taken from the profit (not from original stake) and accumulated for the creator.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static settleBet(params: CallParams<PercivalScArgs['obj']['settleBet(uint64)bool'] | PercivalScArgs['tuple']['settleBet(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'settleBet(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.betId],
    }
  }
  /**
   * Constructs a no op call for the withdrawFees(uint64)bool ABI method
   *
   * Withdraw accumulated fees for a market. Only the market creator.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawFees(params: CallParams<PercivalScArgs['obj']['withdrawFees(uint64)bool'] | PercivalScArgs['tuple']['withdrawFees(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawFees(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.marketId],
    }
  }
  /**
   * Constructs a no op call for the getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64) ABI method
   *
   * Read-only: get market details
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getMarket(params: CallParams<PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.marketId],
    }
  }
  /**
   * Constructs a no op call for the getBet(uint64)(uint64,address,bool,uint64,bool) ABI method
   *
   * Read-only: get bet details
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getBet(params: CallParams<PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)'] | PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getBet(uint64)(uint64,address,bool,uint64,bool)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.betId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the PercivalSc smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class PercivalScFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `PercivalScFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new PercivalScClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new PercivalScClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the PercivalSc smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: PercivalScDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new PercivalScClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PercivalSc smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PercivalSc smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the PercivalSc smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new PercivalScClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the PercivalSc smart contract
 */
export class PercivalScClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `PercivalScClient`
   *
   * @param appClient An `AppClient` instance which has been created with the PercivalSc app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `PercivalScClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends PercivalScNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `PercivalScClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<PercivalScClient> {
    return new PercivalScClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `PercivalScClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<PercivalScClient> {
    return new PercivalScClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the PercivalSc smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `createMarket(string,string,uint64,uint64,account,uint64)uint64` ABI method.
     *
     * Create a new prediction market.
     *
     * @param params The params for the smart contract call
     * @returns The call params: marketId
     */
    createMarket: (params: CallParams<PercivalScArgs['obj']['createMarket(string,string,uint64,uint64,account,uint64)uint64'] | PercivalScArgs['tuple']['createMarket(string,string,uint64,uint64,account,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PercivalScParamsFactory.createMarket(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `placeBet(uint64,bool,uint64,pay)uint64` ABI method.
     *
     * Place a YES/NO bet by grouping a payment transaction to the app address.
     *
     * @param params The params for the smart contract call
     * @returns The call params: betId
     */
    placeBet: (params: CallParams<PercivalScArgs['obj']['placeBet(uint64,bool,uint64,pay)uint64'] | PercivalScArgs['tuple']['placeBet(uint64,bool,uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PercivalScParamsFactory.placeBet(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `resolveMarket(uint64,uint64)bool` ABI method.
     *
    * Resolve a market by providing the final observed count.
    Can be called by the configured oracle after the deadline.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resolveMarket: (params: CallParams<PercivalScArgs['obj']['resolveMarket(uint64,uint64)bool'] | PercivalScArgs['tuple']['resolveMarket(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PercivalScParamsFactory.resolveMarket(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `settleBet(uint64)bool` ABI method.
     *
    * Settle an individual bet after resolution and pay out if it won.
    Anyone can trigger, but funds go to the original bettor.
    Fee is taken from the profit (not from original stake) and accumulated for the creator.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    settleBet: (params: CallParams<PercivalScArgs['obj']['settleBet(uint64)bool'] | PercivalScArgs['tuple']['settleBet(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PercivalScParamsFactory.settleBet(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `withdrawFees(uint64)bool` ABI method.
     *
     * Withdraw accumulated fees for a market. Only the market creator.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawFees: (params: CallParams<PercivalScArgs['obj']['withdrawFees(uint64)bool'] | PercivalScArgs['tuple']['withdrawFees(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PercivalScParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only: get market details
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getMarket: (params: CallParams<PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PercivalScParamsFactory.getMarket(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `getBet(uint64)(uint64,address,bool,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only: get bet details
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getBet: (params: CallParams<PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)'] | PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(PercivalScParamsFactory.getBet(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the PercivalSc smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `createMarket(string,string,uint64,uint64,account,uint64)uint64` ABI method.
     *
     * Create a new prediction market.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: marketId
     */
    createMarket: (params: CallParams<PercivalScArgs['obj']['createMarket(string,string,uint64,uint64,account,uint64)uint64'] | PercivalScArgs['tuple']['createMarket(string,string,uint64,uint64,account,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PercivalScParamsFactory.createMarket(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `placeBet(uint64,bool,uint64,pay)uint64` ABI method.
     *
     * Place a YES/NO bet by grouping a payment transaction to the app address.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: betId
     */
    placeBet: (params: CallParams<PercivalScArgs['obj']['placeBet(uint64,bool,uint64,pay)uint64'] | PercivalScArgs['tuple']['placeBet(uint64,bool,uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PercivalScParamsFactory.placeBet(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `resolveMarket(uint64,uint64)bool` ABI method.
     *
    * Resolve a market by providing the final observed count.
    Can be called by the configured oracle after the deadline.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resolveMarket: (params: CallParams<PercivalScArgs['obj']['resolveMarket(uint64,uint64)bool'] | PercivalScArgs['tuple']['resolveMarket(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PercivalScParamsFactory.resolveMarket(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `settleBet(uint64)bool` ABI method.
     *
    * Settle an individual bet after resolution and pay out if it won.
    Anyone can trigger, but funds go to the original bettor.
    Fee is taken from the profit (not from original stake) and accumulated for the creator.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    settleBet: (params: CallParams<PercivalScArgs['obj']['settleBet(uint64)bool'] | PercivalScArgs['tuple']['settleBet(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PercivalScParamsFactory.settleBet(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `withdrawFees(uint64)bool` ABI method.
     *
     * Withdraw accumulated fees for a market. Only the market creator.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawFees: (params: CallParams<PercivalScArgs['obj']['withdrawFees(uint64)bool'] | PercivalScArgs['tuple']['withdrawFees(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PercivalScParamsFactory.withdrawFees(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only: get market details
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getMarket: (params: CallParams<PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PercivalScParamsFactory.getMarket(params))
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `getBet(uint64)(uint64,address,bool,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only: get bet details
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getBet: (params: CallParams<PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)'] | PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(PercivalScParamsFactory.getBet(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the PercivalSc smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `createMarket(string,string,uint64,uint64,account,uint64)uint64` ABI method.
     *
     * Create a new prediction market.
     *
     * @param params The params for the smart contract call
     * @returns The call result: marketId
     */
    createMarket: async (params: CallParams<PercivalScArgs['obj']['createMarket(string,string,uint64,uint64,account,uint64)uint64'] | PercivalScArgs['tuple']['createMarket(string,string,uint64,uint64,account,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PercivalScParamsFactory.createMarket(params))
      return {...result, return: result.return as unknown as (undefined | PercivalScReturns['createMarket(string,string,uint64,uint64,account,uint64)uint64'])}
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `placeBet(uint64,bool,uint64,pay)uint64` ABI method.
     *
     * Place a YES/NO bet by grouping a payment transaction to the app address.
     *
     * @param params The params for the smart contract call
     * @returns The call result: betId
     */
    placeBet: async (params: CallParams<PercivalScArgs['obj']['placeBet(uint64,bool,uint64,pay)uint64'] | PercivalScArgs['tuple']['placeBet(uint64,bool,uint64,pay)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PercivalScParamsFactory.placeBet(params))
      return {...result, return: result.return as unknown as (undefined | PercivalScReturns['placeBet(uint64,bool,uint64,pay)uint64'])}
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `resolveMarket(uint64,uint64)bool` ABI method.
     *
    * Resolve a market by providing the final observed count.
    Can be called by the configured oracle after the deadline.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resolveMarket: async (params: CallParams<PercivalScArgs['obj']['resolveMarket(uint64,uint64)bool'] | PercivalScArgs['tuple']['resolveMarket(uint64,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PercivalScParamsFactory.resolveMarket(params))
      return {...result, return: result.return as unknown as (undefined | PercivalScReturns['resolveMarket(uint64,uint64)bool'])}
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `settleBet(uint64)bool` ABI method.
     *
    * Settle an individual bet after resolution and pay out if it won.
    Anyone can trigger, but funds go to the original bettor.
    Fee is taken from the profit (not from original stake) and accumulated for the creator.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    settleBet: async (params: CallParams<PercivalScArgs['obj']['settleBet(uint64)bool'] | PercivalScArgs['tuple']['settleBet(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PercivalScParamsFactory.settleBet(params))
      return {...result, return: result.return as unknown as (undefined | PercivalScReturns['settleBet(uint64)bool'])}
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `withdrawFees(uint64)bool` ABI method.
     *
     * Withdraw accumulated fees for a market. Only the market creator.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawFees: async (params: CallParams<PercivalScArgs['obj']['withdrawFees(uint64)bool'] | PercivalScArgs['tuple']['withdrawFees(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PercivalScParamsFactory.withdrawFees(params))
      return {...result, return: result.return as unknown as (undefined | PercivalScReturns['withdrawFees(uint64)bool'])}
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only: get market details
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getMarket: async (params: CallParams<PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PercivalScParamsFactory.getMarket(params))
      return {...result, return: result.return as unknown as (undefined | PercivalScReturns['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the PercivalSc smart contract using the `getBet(uint64)(uint64,address,bool,uint64,bool)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Read-only: get bet details
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getBet: async (params: CallParams<PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)'] | PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(PercivalScParamsFactory.getBet(params))
      return {...result, return: result.return as unknown as (undefined | PercivalScReturns['getBet(uint64)(uint64,address,bool,uint64,bool)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new PercivalScClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the PercivalSc smart contract using the `getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Read-only: get market details
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getMarket(params: CallParams<PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(PercivalScParamsFactory.getMarket(params))
    return result.return as unknown as PercivalScReturns['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']
  }

  /**
   * Makes a readonly (simulated) call to the PercivalSc smart contract using the `getBet(uint64)(uint64,address,bool,uint64,bool)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Read-only: get bet details
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getBet(params: CallParams<PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)'] | PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']>) {
    const result = await this.appClient.send.call(PercivalScParamsFactory.getBet(params))
    return result.return as unknown as PercivalScReturns['getBet(uint64)(uint64,address,bool,uint64,bool)']
  }

  /**
   * Methods to access state for the current PercivalSc app
   */
  state = {
    /**
     * Methods to access global state for the current PercivalSc app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextMarketId: result.nextMarketId,
          nextBetId: result.nextBetId,
        }
      },
      /**
       * Get the current value of the nextMarketId key in global state
       */
      nextMarketId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextMarketId")) as bigint | undefined },
      /**
       * Get the current value of the nextBetId key in global state
       */
      nextBetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextBetId")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current PercivalSc app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the markets map in box state
       */
      markets: {
        /**
         * Get all current values of the markets map in box state
         */
        getMap: async (): Promise<Map<bigint, MarketStruct>> => { return (await this.appClient.state.box.getMap("markets")) as Map<bigint, MarketStruct> },
        /**
         * Get a current value of the markets map by key from box state
         */
        value: async (key: bigint | number): Promise<MarketStruct | undefined> => { return await this.appClient.state.box.getMapValue("markets", key) as MarketStruct | undefined },
      },
      /**
       * Get values from the bets map in box state
       */
      bets: {
        /**
         * Get all current values of the bets map in box state
         */
        getMap: async (): Promise<Map<bigint, BetStruct>> => { return (await this.appClient.state.box.getMap("bets")) as Map<bigint, BetStruct> },
        /**
         * Get a current value of the bets map by key from box state
         */
        value: async (key: bigint | number): Promise<BetStruct | undefined> => { return await this.appClient.state.box.getMapValue("bets", key) as BetStruct | undefined },
      },
    },
  }

  public newGroup(): PercivalScComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createMarket(string,string,uint64,uint64,account,uint64)uint64 method call against the PercivalSc contract
       */
      createMarket(params: CallParams<PercivalScArgs['obj']['createMarket(string,string,uint64,uint64,account,uint64)uint64'] | PercivalScArgs['tuple']['createMarket(string,string,uint64,uint64,account,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createMarket(params)))
        resultMappers.push((v) => client.decodeReturnValue('createMarket(string,string,uint64,uint64,account,uint64)uint64', v))
        return this
      },
      /**
       * Add a placeBet(uint64,bool,uint64,pay)uint64 method call against the PercivalSc contract
       */
      placeBet(params: CallParams<PercivalScArgs['obj']['placeBet(uint64,bool,uint64,pay)uint64'] | PercivalScArgs['tuple']['placeBet(uint64,bool,uint64,pay)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.placeBet(params)))
        resultMappers.push((v) => client.decodeReturnValue('placeBet(uint64,bool,uint64,pay)uint64', v))
        return this
      },
      /**
       * Add a resolveMarket(uint64,uint64)bool method call against the PercivalSc contract
       */
      resolveMarket(params: CallParams<PercivalScArgs['obj']['resolveMarket(uint64,uint64)bool'] | PercivalScArgs['tuple']['resolveMarket(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resolveMarket(params)))
        resultMappers.push((v) => client.decodeReturnValue('resolveMarket(uint64,uint64)bool', v))
        return this
      },
      /**
       * Add a settleBet(uint64)bool method call against the PercivalSc contract
       */
      settleBet(params: CallParams<PercivalScArgs['obj']['settleBet(uint64)bool'] | PercivalScArgs['tuple']['settleBet(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.settleBet(params)))
        resultMappers.push((v) => client.decodeReturnValue('settleBet(uint64)bool', v))
        return this
      },
      /**
       * Add a withdrawFees(uint64)bool method call against the PercivalSc contract
       */
      withdrawFees(params: CallParams<PercivalScArgs['obj']['withdrawFees(uint64)bool'] | PercivalScArgs['tuple']['withdrawFees(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawFees(params)))
        resultMappers.push((v) => client.decodeReturnValue('withdrawFees(uint64)bool', v))
        return this
      },
      /**
       * Add a getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64) method call against the PercivalSc contract
       */
      getMarket(params: CallParams<PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getMarket(params)))
        resultMappers.push((v) => client.decodeReturnValue('getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getBet(uint64)(uint64,address,bool,uint64,bool) method call against the PercivalSc contract
       */
      getBet(params: CallParams<PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)'] | PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getBet(params)))
        resultMappers.push((v) => client.decodeReturnValue('getBet(uint64)(uint64,address,bool,uint64,bool)', v))
        return this
      },
      /**
       * Add a clear state call to the PercivalSc contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as PercivalScComposer
  }
}
export type PercivalScComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createMarket(string,string,uint64,uint64,account,uint64)uint64 ABI method.
   *
   * Create a new prediction market.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createMarket(params?: CallParams<PercivalScArgs['obj']['createMarket(string,string,uint64,uint64,account,uint64)uint64'] | PercivalScArgs['tuple']['createMarket(string,string,uint64,uint64,account,uint64)uint64']>): PercivalScComposer<[...TReturns, PercivalScReturns['createMarket(string,string,uint64,uint64,account,uint64)uint64'] | undefined]>

  /**
   * Calls the placeBet(uint64,bool,uint64,pay)uint64 ABI method.
   *
   * Place a YES/NO bet by grouping a payment transaction to the app address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  placeBet(params?: CallParams<PercivalScArgs['obj']['placeBet(uint64,bool,uint64,pay)uint64'] | PercivalScArgs['tuple']['placeBet(uint64,bool,uint64,pay)uint64']>): PercivalScComposer<[...TReturns, PercivalScReturns['placeBet(uint64,bool,uint64,pay)uint64'] | undefined]>

  /**
   * Calls the resolveMarket(uint64,uint64)bool ABI method.
   *
  * Resolve a market by providing the final observed count.
  Can be called by the configured oracle after the deadline.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveMarket(params?: CallParams<PercivalScArgs['obj']['resolveMarket(uint64,uint64)bool'] | PercivalScArgs['tuple']['resolveMarket(uint64,uint64)bool']>): PercivalScComposer<[...TReturns, PercivalScReturns['resolveMarket(uint64,uint64)bool'] | undefined]>

  /**
   * Calls the settleBet(uint64)bool ABI method.
   *
  * Settle an individual bet after resolution and pay out if it won.
  Anyone can trigger, but funds go to the original bettor.
  Fee is taken from the profit (not from original stake) and accumulated for the creator.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  settleBet(params?: CallParams<PercivalScArgs['obj']['settleBet(uint64)bool'] | PercivalScArgs['tuple']['settleBet(uint64)bool']>): PercivalScComposer<[...TReturns, PercivalScReturns['settleBet(uint64)bool'] | undefined]>

  /**
   * Calls the withdrawFees(uint64)bool ABI method.
   *
   * Withdraw accumulated fees for a market. Only the market creator.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawFees(params?: CallParams<PercivalScArgs['obj']['withdrawFees(uint64)bool'] | PercivalScArgs['tuple']['withdrawFees(uint64)bool']>): PercivalScComposer<[...TReturns, PercivalScReturns['withdrawFees(uint64)bool'] | undefined]>

  /**
   * Calls the getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64) ABI method.
   *
   * Read-only: get market details
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getMarket(params?: CallParams<PercivalScArgs['obj']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | PercivalScArgs['tuple']['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)']>): PercivalScComposer<[...TReturns, PercivalScReturns['getMarket(uint64)(string,string,uint64,uint64,bool,uint64,address,address,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getBet(uint64)(uint64,address,bool,uint64,bool) ABI method.
   *
   * Read-only: get bet details
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getBet(params?: CallParams<PercivalScArgs['obj']['getBet(uint64)(uint64,address,bool,uint64,bool)'] | PercivalScArgs['tuple']['getBet(uint64)(uint64,address,bool,uint64,bool)']>): PercivalScComposer<[...TReturns, PercivalScReturns['getBet(uint64)(uint64,address,bool,uint64,bool)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the PercivalSc smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): PercivalScComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): PercivalScComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<PercivalScComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<PercivalScComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<PercivalScComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<PercivalScComposerResults<TReturns>>
}
export type PercivalScComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

